/* soapC.cpp
   Generated by gSOAP 2.8.12 from service.1cws?wsdl.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.12 2014-05-13 16:43:38 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__StopResponse:
		return soap_in_PointerTo_ns1__StopResponse(soap, NULL, NULL, "ns1:StopResponse");
	case SOAP_TYPE_PointerTo_ns1__Stop:
		return soap_in_PointerTo_ns1__Stop(soap, NULL, NULL, "ns1:Stop");
	case SOAP_TYPE_PointerTo_ns1__StatusResponse:
		return soap_in_PointerTo_ns1__StatusResponse(soap, NULL, NULL, "ns1:StatusResponse");
	case SOAP_TYPE_PointerTo_ns1__Status:
		return soap_in_PointerTo_ns1__Status(soap, NULL, NULL, "ns1:Status");
	case SOAP_TYPE_PointerTo_ns1__StartResponse:
		return soap_in_PointerTo_ns1__StartResponse(soap, NULL, NULL, "ns1:StartResponse");
	case SOAP_TYPE_PointerTo_ns1__Start:
		return soap_in_PointerTo_ns1__Start(soap, NULL, NULL, "ns1:Start");
	case SOAP_TYPE_PointerTo_ns1__runCodeResponse:
		return soap_in_PointerTo_ns1__runCodeResponse(soap, NULL, NULL, "ns1:runCodeResponse");
	case SOAP_TYPE_PointerTo_ns1__runCode:
		return soap_in_PointerTo_ns1__runCode(soap, NULL, NULL, "ns1:runCode");
	case SOAP_TYPE_PointerTo_ns1__getNameResponse:
		return soap_in_PointerTo_ns1__getNameResponse(soap, NULL, NULL, "ns1:getNameResponse");
	case SOAP_TYPE_PointerTo_ns1__getName:
		return soap_in_PointerTo_ns1__getName(soap, NULL, NULL, "ns1:getName");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:StopResponse"))
		{	*type = SOAP_TYPE__ns1__StopResponse;
			return soap_in__ns1__StopResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Stop"))
		{	*type = SOAP_TYPE__ns1__Stop;
			return soap_in__ns1__Stop(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:StatusResponse"))
		{	*type = SOAP_TYPE__ns1__StatusResponse;
			return soap_in__ns1__StatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Status"))
		{	*type = SOAP_TYPE__ns1__Status;
			return soap_in__ns1__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:StartResponse"))
		{	*type = SOAP_TYPE__ns1__StartResponse;
			return soap_in__ns1__StartResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Start"))
		{	*type = SOAP_TYPE__ns1__Start;
			return soap_in__ns1__Start(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:runCodeResponse"))
		{	*type = SOAP_TYPE__ns1__runCodeResponse;
			return soap_in__ns1__runCodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:runCode"))
		{	*type = SOAP_TYPE__ns1__runCode;
			return soap_in__ns1__runCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getNameResponse"))
		{	*type = SOAP_TYPE__ns1__getNameResponse;
			return soap_in__ns1__getNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getName"))
		{	*type = SOAP_TYPE__ns1__getName;
			return soap_in__ns1__getName(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__StopResponse:
		return ((_ns1__StopResponse *)ptr)->soap_out(soap, "ns1:StopResponse", id, NULL);
	case SOAP_TYPE__ns1__Stop:
		return ((_ns1__Stop *)ptr)->soap_out(soap, "ns1:Stop", id, NULL);
	case SOAP_TYPE__ns1__StatusResponse:
		return ((_ns1__StatusResponse *)ptr)->soap_out(soap, "ns1:StatusResponse", id, NULL);
	case SOAP_TYPE__ns1__Status:
		return ((_ns1__Status *)ptr)->soap_out(soap, "ns1:Status", id, NULL);
	case SOAP_TYPE__ns1__StartResponse:
		return ((_ns1__StartResponse *)ptr)->soap_out(soap, "ns1:StartResponse", id, NULL);
	case SOAP_TYPE__ns1__Start:
		return ((_ns1__Start *)ptr)->soap_out(soap, "ns1:Start", id, NULL);
	case SOAP_TYPE__ns1__runCodeResponse:
		return ((_ns1__runCodeResponse *)ptr)->soap_out(soap, "ns1:runCodeResponse", id, NULL);
	case SOAP_TYPE__ns1__runCode:
		return ((_ns1__runCode *)ptr)->soap_out(soap, "ns1:runCode", id, NULL);
	case SOAP_TYPE__ns1__getNameResponse:
		return ((_ns1__getNameResponse *)ptr)->soap_out(soap, "ns1:getNameResponse", id, NULL);
	case SOAP_TYPE__ns1__getName:
		return ((_ns1__getName *)ptr)->soap_out(soap, "ns1:getName", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__StopResponse:
		return soap_out_PointerTo_ns1__StopResponse(soap, tag, id, (_ns1__StopResponse *const*)ptr, "ns1:StopResponse");
	case SOAP_TYPE_PointerTo_ns1__Stop:
		return soap_out_PointerTo_ns1__Stop(soap, tag, id, (_ns1__Stop *const*)ptr, "ns1:Stop");
	case SOAP_TYPE_PointerTo_ns1__StatusResponse:
		return soap_out_PointerTo_ns1__StatusResponse(soap, tag, id, (_ns1__StatusResponse *const*)ptr, "ns1:StatusResponse");
	case SOAP_TYPE_PointerTo_ns1__Status:
		return soap_out_PointerTo_ns1__Status(soap, tag, id, (_ns1__Status *const*)ptr, "ns1:Status");
	case SOAP_TYPE_PointerTo_ns1__StartResponse:
		return soap_out_PointerTo_ns1__StartResponse(soap, tag, id, (_ns1__StartResponse *const*)ptr, "ns1:StartResponse");
	case SOAP_TYPE_PointerTo_ns1__Start:
		return soap_out_PointerTo_ns1__Start(soap, tag, id, (_ns1__Start *const*)ptr, "ns1:Start");
	case SOAP_TYPE_PointerTo_ns1__runCodeResponse:
		return soap_out_PointerTo_ns1__runCodeResponse(soap, tag, id, (_ns1__runCodeResponse *const*)ptr, "ns1:runCodeResponse");
	case SOAP_TYPE_PointerTo_ns1__runCode:
		return soap_out_PointerTo_ns1__runCode(soap, tag, id, (_ns1__runCode *const*)ptr, "ns1:runCode");
	case SOAP_TYPE_PointerTo_ns1__getNameResponse:
		return soap_out_PointerTo_ns1__getNameResponse(soap, tag, id, (_ns1__getNameResponse *const*)ptr, "ns1:getNameResponse");
	case SOAP_TYPE_PointerTo_ns1__getName:
		return soap_out_PointerTo_ns1__getName(soap, tag, id, (_ns1__getName *const*)ptr, "ns1:getName");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__StopResponse:
		((_ns1__StopResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Stop:
		((_ns1__Stop *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__StatusResponse:
		((_ns1__StatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Status:
		((_ns1__Status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__StartResponse:
		((_ns1__StartResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Start:
		((_ns1__Start *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__runCodeResponse:
		((_ns1__runCodeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__runCode:
		((_ns1__runCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getNameResponse:
		((_ns1__getNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getName:
		((_ns1__getName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__Stop_:
		soap_serialize___ns1__Stop_(soap, (const struct __ns1__Stop_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Status_:
		soap_serialize___ns1__Status_(soap, (const struct __ns1__Status_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Start_:
		soap_serialize___ns1__Start_(soap, (const struct __ns1__Start_ *)ptr);
		break;
	case SOAP_TYPE___ns1__runCode_:
		soap_serialize___ns1__runCode_(soap, (const struct __ns1__runCode_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getName_:
		soap_serialize___ns1__getName_(soap, (const struct __ns1__getName_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Stop:
		soap_serialize___ns1__Stop(soap, (const struct __ns1__Stop *)ptr);
		break;
	case SOAP_TYPE___ns1__Status:
		soap_serialize___ns1__Status(soap, (const struct __ns1__Status *)ptr);
		break;
	case SOAP_TYPE___ns1__Start:
		soap_serialize___ns1__Start(soap, (const struct __ns1__Start *)ptr);
		break;
	case SOAP_TYPE___ns1__runCode:
		soap_serialize___ns1__runCode(soap, (const struct __ns1__runCode *)ptr);
		break;
	case SOAP_TYPE___ns1__getName:
		soap_serialize___ns1__getName(soap, (const struct __ns1__getName *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__StopResponse:
		soap_serialize_PointerTo_ns1__StopResponse(soap, (_ns1__StopResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Stop:
		soap_serialize_PointerTo_ns1__Stop(soap, (_ns1__Stop *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__StatusResponse:
		soap_serialize_PointerTo_ns1__StatusResponse(soap, (_ns1__StatusResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Status:
		soap_serialize_PointerTo_ns1__Status(soap, (_ns1__Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__StartResponse:
		soap_serialize_PointerTo_ns1__StartResponse(soap, (_ns1__StartResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Start:
		soap_serialize_PointerTo_ns1__Start(soap, (_ns1__Start *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__runCodeResponse:
		soap_serialize_PointerTo_ns1__runCodeResponse(soap, (_ns1__runCodeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__runCode:
		soap_serialize_PointerTo_ns1__runCode(soap, (_ns1__runCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getNameResponse:
		soap_serialize_PointerTo_ns1__getNameResponse(soap, (_ns1__getNameResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getName:
		soap_serialize_PointerTo_ns1__getName(soap, (_ns1__getName *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getName:
		return (void*)soap_instantiate__ns1__getName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getNameResponse:
		return (void*)soap_instantiate__ns1__getNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__runCode:
		return (void*)soap_instantiate__ns1__runCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__runCodeResponse:
		return (void*)soap_instantiate__ns1__runCodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Start:
		return (void*)soap_instantiate__ns1__Start(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__StartResponse:
		return (void*)soap_instantiate__ns1__StartResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Status:
		return (void*)soap_instantiate__ns1__Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__StatusResponse:
		return (void*)soap_instantiate__ns1__StatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Stop:
		return (void*)soap_instantiate__ns1__Stop(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__StopResponse:
		return (void*)soap_instantiate__ns1__StopResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getName:
		return (void*)soap_instantiate___ns1__getName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__runCode:
		return (void*)soap_instantiate___ns1__runCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Start:
		return (void*)soap_instantiate___ns1__Start(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Status:
		return (void*)soap_instantiate___ns1__Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Stop:
		return (void*)soap_instantiate___ns1__Stop(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getName_:
		return (void*)soap_instantiate___ns1__getName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__runCode_:
		return (void*)soap_instantiate___ns1__runCode_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Start_:
		return (void*)soap_instantiate___ns1__Start_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Status_:
		return (void*)soap_instantiate___ns1__Status_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Stop_:
		return (void*)soap_instantiate___ns1__Stop_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getName:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getName*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getNameResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getNameResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getNameResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__runCode:
		if (p->size < 0)
			SOAP_DELETE((_ns1__runCode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__runCode*)p->ptr);
		break;
	case SOAP_TYPE__ns1__runCodeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__runCodeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__runCodeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Start:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Start*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Start*)p->ptr);
		break;
	case SOAP_TYPE__ns1__StartResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__StartResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__StartResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Status:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Status*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Status*)p->ptr);
		break;
	case SOAP_TYPE__ns1__StatusResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__StatusResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__StatusResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Stop:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Stop*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Stop*)p->ptr);
		break;
	case SOAP_TYPE__ns1__StopResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__StopResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__StopResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getName:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getName*)p->ptr);
		break;
	case SOAP_TYPE___ns1__runCode:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__runCode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__runCode*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Start:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Start*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Start*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Status:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Status*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Status*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Stop:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Stop*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Stop*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getName_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getName_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getName_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__runCode_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__runCode_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__runCode_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Start_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Start_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Start_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Status_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Status_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Status_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Stop_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Stop_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Stop_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__StopResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__StopResponse::return_);
	/* transient soap skipped */
}

void _ns1__StopResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__StopResponse::return_);
	/* transient soap skipped */
}

int _ns1__StopResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__StopResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopResponse(struct soap *soap, const char *tag, int id, const _ns1__StopResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__StopResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &(a->_ns1__StopResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__StopResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__StopResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__StopResponse * SOAP_FMAC4 soap_in__ns1__StopResponse(struct soap *soap, const char *tag, _ns1__StopResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__StopResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__StopResponse, sizeof(_ns1__StopResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__StopResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__StopResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &(a->_ns1__StopResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__StopResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__StopResponse, 0, sizeof(_ns1__StopResponse), 0, soap_copy__ns1__StopResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__StopResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__StopResponse);
	if (this->soap_out(soap, tag?tag:"ns1:StopResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__StopResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__StopResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__StopResponse * SOAP_FMAC4 soap_get__ns1__StopResponse(struct soap *soap, _ns1__StopResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__StopResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__StopResponse * SOAP_FMAC2 soap_instantiate__ns1__StopResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__StopResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__StopResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__StopResponse);
		if (size)
			*size = sizeof(_ns1__StopResponse);
		((_ns1__StopResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__StopResponse, n);
		if (size)
			*size = n * sizeof(_ns1__StopResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__StopResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__StopResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StopResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__StopResponse %p -> %p\n", q, p));
	*(_ns1__StopResponse*)p = *(_ns1__StopResponse*)q;
}

void _ns1__Stop::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__Stop::ID);
	/* transient soap skipped */
}

void _ns1__Stop::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__Stop::ID);
	/* transient soap skipped */
}

int _ns1__Stop::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Stop(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Stop(struct soap *soap, const char *tag, int id, const _ns1__Stop *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Stop), type))
		return soap->error;
	if (soap_out_std__string(soap, "ID", -1, &(a->_ns1__Stop::ID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Stop::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Stop(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Stop * SOAP_FMAC4 soap_in__ns1__Stop(struct soap *soap, const char *tag, _ns1__Stop *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Stop *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Stop, sizeof(_ns1__Stop), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Stop)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Stop *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ID", &(a->_ns1__Stop::ID), "xsd:string"))
				{	soap_flag_ID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Stop *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Stop, 0, sizeof(_ns1__Stop), 0, soap_copy__ns1__Stop);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Stop::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Stop);
	if (this->soap_out(soap, tag?tag:"ns1:Stop", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Stop::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Stop(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Stop * SOAP_FMAC4 soap_get__ns1__Stop(struct soap *soap, _ns1__Stop *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Stop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Stop * SOAP_FMAC2 soap_instantiate__ns1__Stop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Stop(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Stop, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Stop);
		if (size)
			*size = sizeof(_ns1__Stop);
		((_ns1__Stop*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Stop, n);
		if (size)
			*size = n * sizeof(_ns1__Stop);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Stop*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Stop*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Stop(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Stop %p -> %p\n", q, p));
	*(_ns1__Stop*)p = *(_ns1__Stop*)q;
}

void _ns1__StatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__StatusResponse::return_);
	/* transient soap skipped */
}

void _ns1__StatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__StatusResponse::return_);
	/* transient soap skipped */
}

int _ns1__StatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__StatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StatusResponse(struct soap *soap, const char *tag, int id, const _ns1__StatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__StatusResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &(a->_ns1__StatusResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__StatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__StatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__StatusResponse * SOAP_FMAC4 soap_in__ns1__StatusResponse(struct soap *soap, const char *tag, _ns1__StatusResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__StatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__StatusResponse, sizeof(_ns1__StatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__StatusResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__StatusResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &(a->_ns1__StatusResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__StatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__StatusResponse, 0, sizeof(_ns1__StatusResponse), 0, soap_copy__ns1__StatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__StatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__StatusResponse);
	if (this->soap_out(soap, tag?tag:"ns1:StatusResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__StatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__StatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__StatusResponse * SOAP_FMAC4 soap_get__ns1__StatusResponse(struct soap *soap, _ns1__StatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__StatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__StatusResponse * SOAP_FMAC2 soap_instantiate__ns1__StatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__StatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__StatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__StatusResponse);
		if (size)
			*size = sizeof(_ns1__StatusResponse);
		((_ns1__StatusResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__StatusResponse, n);
		if (size)
			*size = n * sizeof(_ns1__StatusResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__StatusResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__StatusResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__StatusResponse %p -> %p\n", q, p));
	*(_ns1__StatusResponse*)p = *(_ns1__StatusResponse*)q;
}

void _ns1__Status::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__Status::ID);
	/* transient soap skipped */
}

void _ns1__Status::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__Status::ID);
	/* transient soap skipped */
}

int _ns1__Status::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Status(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Status(struct soap *soap, const char *tag, int id, const _ns1__Status *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Status), type))
		return soap->error;
	if (soap_out_std__string(soap, "ID", -1, &(a->_ns1__Status::ID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Status::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Status(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Status * SOAP_FMAC4 soap_in__ns1__Status(struct soap *soap, const char *tag, _ns1__Status *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Status *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Status, sizeof(_ns1__Status), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Status)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Status *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ID", &(a->_ns1__Status::ID), "xsd:string"))
				{	soap_flag_ID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Status, 0, sizeof(_ns1__Status), 0, soap_copy__ns1__Status);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Status::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Status);
	if (this->soap_out(soap, tag?tag:"ns1:Status", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Status::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Status(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Status * SOAP_FMAC4 soap_get__ns1__Status(struct soap *soap, _ns1__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Status * SOAP_FMAC2 soap_instantiate__ns1__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Status);
		if (size)
			*size = sizeof(_ns1__Status);
		((_ns1__Status*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Status, n);
		if (size)
			*size = n * sizeof(_ns1__Status);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Status*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Status*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Status %p -> %p\n", q, p));
	*(_ns1__Status*)p = *(_ns1__Status*)q;
}

void _ns1__StartResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__StartResponse::return_);
	/* transient soap skipped */
}

void _ns1__StartResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__StartResponse::return_);
	/* transient soap skipped */
}

int _ns1__StartResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__StartResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartResponse(struct soap *soap, const char *tag, int id, const _ns1__StartResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__StartResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &(a->_ns1__StartResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__StartResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__StartResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__StartResponse * SOAP_FMAC4 soap_in__ns1__StartResponse(struct soap *soap, const char *tag, _ns1__StartResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__StartResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__StartResponse, sizeof(_ns1__StartResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__StartResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__StartResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &(a->_ns1__StartResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__StartResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__StartResponse, 0, sizeof(_ns1__StartResponse), 0, soap_copy__ns1__StartResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__StartResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__StartResponse);
	if (this->soap_out(soap, tag?tag:"ns1:StartResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__StartResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__StartResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__StartResponse * SOAP_FMAC4 soap_get__ns1__StartResponse(struct soap *soap, _ns1__StartResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__StartResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__StartResponse * SOAP_FMAC2 soap_instantiate__ns1__StartResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__StartResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__StartResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__StartResponse);
		if (size)
			*size = sizeof(_ns1__StartResponse);
		((_ns1__StartResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__StartResponse, n);
		if (size)
			*size = n * sizeof(_ns1__StartResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__StartResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__StartResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StartResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__StartResponse %p -> %p\n", q, p));
	*(_ns1__StartResponse*)p = *(_ns1__StartResponse*)q;
}

void _ns1__Start::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__Start::Uuid);
	/* transient soap skipped */
}

void _ns1__Start::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__Start::Uuid);
	/* transient soap skipped */
}

int _ns1__Start::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Start(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Start(struct soap *soap, const char *tag, int id, const _ns1__Start *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Start), type))
		return soap->error;
	if (soap_out_std__string(soap, "Uuid", -1, &(a->_ns1__Start::Uuid), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Start::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Start(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Start * SOAP_FMAC4 soap_in__ns1__Start(struct soap *soap, const char *tag, _ns1__Start *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Start *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Start, sizeof(_ns1__Start), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Start)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Start *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Uuid1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Uuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Uuid", &(a->_ns1__Start::Uuid), "xsd:string"))
				{	soap_flag_Uuid1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Start *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Start, 0, sizeof(_ns1__Start), 0, soap_copy__ns1__Start);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Uuid1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Start::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Start);
	if (this->soap_out(soap, tag?tag:"ns1:Start", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Start::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Start(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Start * SOAP_FMAC4 soap_get__ns1__Start(struct soap *soap, _ns1__Start *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Start(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Start * SOAP_FMAC2 soap_instantiate__ns1__Start(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Start(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Start, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Start);
		if (size)
			*size = sizeof(_ns1__Start);
		((_ns1__Start*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Start, n);
		if (size)
			*size = n * sizeof(_ns1__Start);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Start*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Start*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Start(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Start %p -> %p\n", q, p));
	*(_ns1__Start*)p = *(_ns1__Start*)q;
}

void _ns1__runCodeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__runCodeResponse::return_);
	/* transient soap skipped */
}

void _ns1__runCodeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__runCodeResponse::return_);
	/* transient soap skipped */
}

int _ns1__runCodeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__runCodeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__runCodeResponse(struct soap *soap, const char *tag, int id, const _ns1__runCodeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__runCodeResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &(a->_ns1__runCodeResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__runCodeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__runCodeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__runCodeResponse * SOAP_FMAC4 soap_in__ns1__runCodeResponse(struct soap *soap, const char *tag, _ns1__runCodeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__runCodeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__runCodeResponse, sizeof(_ns1__runCodeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__runCodeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__runCodeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &(a->_ns1__runCodeResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__runCodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__runCodeResponse, 0, sizeof(_ns1__runCodeResponse), 0, soap_copy__ns1__runCodeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__runCodeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__runCodeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:runCodeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__runCodeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__runCodeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__runCodeResponse * SOAP_FMAC4 soap_get__ns1__runCodeResponse(struct soap *soap, _ns1__runCodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__runCodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__runCodeResponse * SOAP_FMAC2 soap_instantiate__ns1__runCodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__runCodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__runCodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__runCodeResponse);
		if (size)
			*size = sizeof(_ns1__runCodeResponse);
		((_ns1__runCodeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__runCodeResponse, n);
		if (size)
			*size = n * sizeof(_ns1__runCodeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__runCodeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__runCodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__runCodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__runCodeResponse %p -> %p\n", q, p));
	*(_ns1__runCodeResponse*)p = *(_ns1__runCodeResponse*)q;
}

void _ns1__runCode::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__runCode::Source);
	/* transient soap skipped */
}

void _ns1__runCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__runCode::Source);
	/* transient soap skipped */
}

int _ns1__runCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__runCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__runCode(struct soap *soap, const char *tag, int id, const _ns1__runCode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__runCode), type))
		return soap->error;
	if (soap_out_std__string(soap, "Source", -1, &(a->_ns1__runCode::Source), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__runCode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__runCode(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__runCode * SOAP_FMAC4 soap_in__ns1__runCode(struct soap *soap, const char *tag, _ns1__runCode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__runCode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__runCode, sizeof(_ns1__runCode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__runCode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__runCode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Source1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Source1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Source", &(a->_ns1__runCode::Source), "xsd:string"))
				{	soap_flag_Source1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__runCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__runCode, 0, sizeof(_ns1__runCode), 0, soap_copy__ns1__runCode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Source1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__runCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__runCode);
	if (this->soap_out(soap, tag?tag:"ns1:runCode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__runCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__runCode(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__runCode * SOAP_FMAC4 soap_get__ns1__runCode(struct soap *soap, _ns1__runCode *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__runCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__runCode * SOAP_FMAC2 soap_instantiate__ns1__runCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__runCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__runCode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__runCode);
		if (size)
			*size = sizeof(_ns1__runCode);
		((_ns1__runCode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__runCode, n);
		if (size)
			*size = n * sizeof(_ns1__runCode);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__runCode*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__runCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__runCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__runCode %p -> %p\n", q, p));
	*(_ns1__runCode*)p = *(_ns1__runCode*)q;
}

void _ns1__getNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__getNameResponse::return_);
	/* transient soap skipped */
}

void _ns1__getNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__getNameResponse::return_);
	/* transient soap skipped */
}

int _ns1__getNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getNameResponse(struct soap *soap, const char *tag, int id, const _ns1__getNameResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getNameResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &(a->_ns1__getNameResponse::return_), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getNameResponse * SOAP_FMAC4 soap_in__ns1__getNameResponse(struct soap *soap, const char *tag, _ns1__getNameResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getNameResponse, sizeof(_ns1__getNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &(a->_ns1__getNameResponse::return_), "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getNameResponse, 0, sizeof(_ns1__getNameResponse), 0, soap_copy__ns1__getNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getNameResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getNameResponse * SOAP_FMAC4 soap_get__ns1__getNameResponse(struct soap *soap, _ns1__getNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getNameResponse * SOAP_FMAC2 soap_instantiate__ns1__getNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getNameResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getNameResponse);
		if (size)
			*size = sizeof(_ns1__getNameResponse);
		((_ns1__getNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__getNameResponse, n);
		if (size)
			*size = n * sizeof(_ns1__getNameResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getNameResponse %p -> %p\n", q, p));
	*(_ns1__getNameResponse*)p = *(_ns1__getNameResponse*)q;
}

void _ns1__getName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__getName::Code);
	/* transient soap skipped */
}

void _ns1__getName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_ns1__getName::Code);
	/* transient soap skipped */
}

int _ns1__getName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getName(struct soap *soap, const char *tag, int id, const _ns1__getName *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getName), type))
		return soap->error;
	if (soap_out_std__string(soap, "Code", -1, &(a->_ns1__getName::Code), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getName(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getName * SOAP_FMAC4 soap_in__ns1__getName(struct soap *soap, const char *tag, _ns1__getName *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getName, sizeof(_ns1__getName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Code1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Code1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Code", &(a->_ns1__getName::Code), "xsd:string"))
				{	soap_flag_Code1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getName, 0, sizeof(_ns1__getName), 0, soap_copy__ns1__getName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Code1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getName);
	if (this->soap_out(soap, tag?tag:"ns1:getName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getName(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getName * SOAP_FMAC4 soap_get__ns1__getName(struct soap *soap, _ns1__getName *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getName * SOAP_FMAC2 soap_instantiate__ns1__getName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getName);
		if (size)
			*size = sizeof(_ns1__getName);
		((_ns1__getName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__getName, n);
		if (size)
			*size = n * sizeof(_ns1__getName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__getName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__getName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getName %p -> %p\n", q, p));
	*(_ns1__getName*)p = *(_ns1__getName*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Stop_(struct soap *soap, struct __ns1__Stop_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Stop = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Stop_(struct soap *soap, const struct __ns1__Stop_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Stop(soap, &a->ns1__Stop);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Stop_(struct soap *soap, const char *tag, int id, const struct __ns1__Stop_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Stop(soap, "ns1:Stop", -1, &a->ns1__Stop, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Stop_ * SOAP_FMAC4 soap_in___ns1__Stop_(struct soap *soap, const char *tag, struct __ns1__Stop_ *a, const char *type)
{
	size_t soap_flag_ns1__Stop = 1;
	short soap_flag;
	a = (struct __ns1__Stop_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Stop_, sizeof(struct __ns1__Stop_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Stop_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Stop && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Stop(soap, "ns1:Stop", &a->ns1__Stop, ""))
				{	soap_flag_ns1__Stop--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Stop_(struct soap *soap, const struct __ns1__Stop_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Stop_(soap, tag?tag:"-ns1:Stop", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Stop_ * SOAP_FMAC4 soap_get___ns1__Stop_(struct soap *soap, struct __ns1__Stop_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Stop_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Stop_ * SOAP_FMAC2 soap_instantiate___ns1__Stop_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Stop_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Stop_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Stop_);
		if (size)
			*size = sizeof(struct __ns1__Stop_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Stop_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Stop_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Stop_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Stop_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Stop_ %p -> %p\n", q, p));
	*(struct __ns1__Stop_*)p = *(struct __ns1__Stop_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Status_(struct soap *soap, struct __ns1__Status_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Status = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Status_(struct soap *soap, const struct __ns1__Status_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Status(soap, &a->ns1__Status);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Status_(struct soap *soap, const char *tag, int id, const struct __ns1__Status_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Status(soap, "ns1:Status", -1, &a->ns1__Status, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Status_ * SOAP_FMAC4 soap_in___ns1__Status_(struct soap *soap, const char *tag, struct __ns1__Status_ *a, const char *type)
{
	size_t soap_flag_ns1__Status = 1;
	short soap_flag;
	a = (struct __ns1__Status_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Status_, sizeof(struct __ns1__Status_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Status_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Status(soap, "ns1:Status", &a->ns1__Status, ""))
				{	soap_flag_ns1__Status--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Status_(struct soap *soap, const struct __ns1__Status_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Status_(soap, tag?tag:"-ns1:Status", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Status_ * SOAP_FMAC4 soap_get___ns1__Status_(struct soap *soap, struct __ns1__Status_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Status_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Status_ * SOAP_FMAC2 soap_instantiate___ns1__Status_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Status_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Status_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Status_);
		if (size)
			*size = sizeof(struct __ns1__Status_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Status_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Status_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Status_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Status_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Status_ %p -> %p\n", q, p));
	*(struct __ns1__Status_*)p = *(struct __ns1__Status_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Start_(struct soap *soap, struct __ns1__Start_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Start = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Start_(struct soap *soap, const struct __ns1__Start_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Start(soap, &a->ns1__Start);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Start_(struct soap *soap, const char *tag, int id, const struct __ns1__Start_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Start(soap, "ns1:Start", -1, &a->ns1__Start, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Start_ * SOAP_FMAC4 soap_in___ns1__Start_(struct soap *soap, const char *tag, struct __ns1__Start_ *a, const char *type)
{
	size_t soap_flag_ns1__Start = 1;
	short soap_flag;
	a = (struct __ns1__Start_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Start_, sizeof(struct __ns1__Start_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Start_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Start && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Start(soap, "ns1:Start", &a->ns1__Start, ""))
				{	soap_flag_ns1__Start--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Start_(struct soap *soap, const struct __ns1__Start_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Start_(soap, tag?tag:"-ns1:Start", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Start_ * SOAP_FMAC4 soap_get___ns1__Start_(struct soap *soap, struct __ns1__Start_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Start_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Start_ * SOAP_FMAC2 soap_instantiate___ns1__Start_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Start_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Start_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Start_);
		if (size)
			*size = sizeof(struct __ns1__Start_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Start_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Start_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Start_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Start_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Start_ %p -> %p\n", q, p));
	*(struct __ns1__Start_*)p = *(struct __ns1__Start_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runCode_(struct soap *soap, struct __ns1__runCode_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__runCode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runCode_(struct soap *soap, const struct __ns1__runCode_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__runCode(soap, &a->ns1__runCode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runCode_(struct soap *soap, const char *tag, int id, const struct __ns1__runCode_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__runCode(soap, "ns1:runCode", -1, &a->ns1__runCode, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__runCode_ * SOAP_FMAC4 soap_in___ns1__runCode_(struct soap *soap, const char *tag, struct __ns1__runCode_ *a, const char *type)
{
	size_t soap_flag_ns1__runCode = 1;
	short soap_flag;
	a = (struct __ns1__runCode_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__runCode_, sizeof(struct __ns1__runCode_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__runCode_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__runCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__runCode(soap, "ns1:runCode", &a->ns1__runCode, ""))
				{	soap_flag_ns1__runCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runCode_(struct soap *soap, const struct __ns1__runCode_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__runCode_(soap, tag?tag:"-ns1:runCode", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__runCode_ * SOAP_FMAC4 soap_get___ns1__runCode_(struct soap *soap, struct __ns1__runCode_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__runCode_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__runCode_ * SOAP_FMAC2 soap_instantiate___ns1__runCode_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__runCode_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__runCode_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__runCode_);
		if (size)
			*size = sizeof(struct __ns1__runCode_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__runCode_, n);
		if (size)
			*size = n * sizeof(struct __ns1__runCode_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__runCode_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__runCode_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__runCode_ %p -> %p\n", q, p));
	*(struct __ns1__runCode_*)p = *(struct __ns1__runCode_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getName_(struct soap *soap, struct __ns1__getName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getName_(struct soap *soap, const struct __ns1__getName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getName(soap, &a->ns1__getName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getName_(struct soap *soap, const char *tag, int id, const struct __ns1__getName_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getName(soap, "ns1:getName", -1, &a->ns1__getName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getName_ * SOAP_FMAC4 soap_in___ns1__getName_(struct soap *soap, const char *tag, struct __ns1__getName_ *a, const char *type)
{
	size_t soap_flag_ns1__getName = 1;
	short soap_flag;
	a = (struct __ns1__getName_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getName_, sizeof(struct __ns1__getName_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getName_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getName(soap, "ns1:getName", &a->ns1__getName, ""))
				{	soap_flag_ns1__getName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getName_(struct soap *soap, const struct __ns1__getName_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getName_(soap, tag?tag:"-ns1:getName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getName_ * SOAP_FMAC4 soap_get___ns1__getName_(struct soap *soap, struct __ns1__getName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getName_ * SOAP_FMAC2 soap_instantiate___ns1__getName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getName_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getName_);
		if (size)
			*size = sizeof(struct __ns1__getName_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__getName_, n);
		if (size)
			*size = n * sizeof(struct __ns1__getName_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getName_ %p -> %p\n", q, p));
	*(struct __ns1__getName_*)p = *(struct __ns1__getName_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Stop(struct soap *soap, struct __ns1__Stop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Stop = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Stop(struct soap *soap, const struct __ns1__Stop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Stop(soap, &a->ns1__Stop);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Stop(struct soap *soap, const char *tag, int id, const struct __ns1__Stop *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Stop(soap, "ns1:Stop", -1, &a->ns1__Stop, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Stop * SOAP_FMAC4 soap_in___ns1__Stop(struct soap *soap, const char *tag, struct __ns1__Stop *a, const char *type)
{
	size_t soap_flag_ns1__Stop = 1;
	short soap_flag;
	a = (struct __ns1__Stop *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Stop, sizeof(struct __ns1__Stop), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Stop(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Stop && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Stop(soap, "ns1:Stop", &a->ns1__Stop, ""))
				{	soap_flag_ns1__Stop--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Stop(struct soap *soap, const struct __ns1__Stop *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Stop(soap, tag?tag:"-ns1:Stop", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Stop * SOAP_FMAC4 soap_get___ns1__Stop(struct soap *soap, struct __ns1__Stop *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Stop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Stop * SOAP_FMAC2 soap_instantiate___ns1__Stop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Stop(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Stop, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Stop);
		if (size)
			*size = sizeof(struct __ns1__Stop);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Stop, n);
		if (size)
			*size = n * sizeof(struct __ns1__Stop);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Stop*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Stop(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Stop %p -> %p\n", q, p));
	*(struct __ns1__Stop*)p = *(struct __ns1__Stop*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Status(struct soap *soap, struct __ns1__Status *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Status = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Status(struct soap *soap, const struct __ns1__Status *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Status(soap, &a->ns1__Status);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Status(struct soap *soap, const char *tag, int id, const struct __ns1__Status *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Status(soap, "ns1:Status", -1, &a->ns1__Status, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Status * SOAP_FMAC4 soap_in___ns1__Status(struct soap *soap, const char *tag, struct __ns1__Status *a, const char *type)
{
	size_t soap_flag_ns1__Status = 1;
	short soap_flag;
	a = (struct __ns1__Status *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Status, sizeof(struct __ns1__Status), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Status(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Status(soap, "ns1:Status", &a->ns1__Status, ""))
				{	soap_flag_ns1__Status--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Status(struct soap *soap, const struct __ns1__Status *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Status(soap, tag?tag:"-ns1:Status", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Status * SOAP_FMAC4 soap_get___ns1__Status(struct soap *soap, struct __ns1__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Status * SOAP_FMAC2 soap_instantiate___ns1__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Status);
		if (size)
			*size = sizeof(struct __ns1__Status);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Status, n);
		if (size)
			*size = n * sizeof(struct __ns1__Status);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Status*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Status %p -> %p\n", q, p));
	*(struct __ns1__Status*)p = *(struct __ns1__Status*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Start(struct soap *soap, struct __ns1__Start *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Start = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Start(struct soap *soap, const struct __ns1__Start *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Start(soap, &a->ns1__Start);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Start(struct soap *soap, const char *tag, int id, const struct __ns1__Start *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Start(soap, "ns1:Start", -1, &a->ns1__Start, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Start * SOAP_FMAC4 soap_in___ns1__Start(struct soap *soap, const char *tag, struct __ns1__Start *a, const char *type)
{
	size_t soap_flag_ns1__Start = 1;
	short soap_flag;
	a = (struct __ns1__Start *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Start, sizeof(struct __ns1__Start), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Start(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Start && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Start(soap, "ns1:Start", &a->ns1__Start, ""))
				{	soap_flag_ns1__Start--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Start(struct soap *soap, const struct __ns1__Start *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Start(soap, tag?tag:"-ns1:Start", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Start * SOAP_FMAC4 soap_get___ns1__Start(struct soap *soap, struct __ns1__Start *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Start(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Start * SOAP_FMAC2 soap_instantiate___ns1__Start(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Start(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Start, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Start);
		if (size)
			*size = sizeof(struct __ns1__Start);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Start, n);
		if (size)
			*size = n * sizeof(struct __ns1__Start);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Start*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Start(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Start %p -> %p\n", q, p));
	*(struct __ns1__Start*)p = *(struct __ns1__Start*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runCode(struct soap *soap, struct __ns1__runCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__runCode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runCode(struct soap *soap, const struct __ns1__runCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__runCode(soap, &a->ns1__runCode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runCode(struct soap *soap, const char *tag, int id, const struct __ns1__runCode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__runCode(soap, "ns1:runCode", -1, &a->ns1__runCode, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__runCode * SOAP_FMAC4 soap_in___ns1__runCode(struct soap *soap, const char *tag, struct __ns1__runCode *a, const char *type)
{
	size_t soap_flag_ns1__runCode = 1;
	short soap_flag;
	a = (struct __ns1__runCode *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__runCode, sizeof(struct __ns1__runCode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__runCode(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__runCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__runCode(soap, "ns1:runCode", &a->ns1__runCode, ""))
				{	soap_flag_ns1__runCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runCode(struct soap *soap, const struct __ns1__runCode *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__runCode(soap, tag?tag:"-ns1:runCode", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__runCode * SOAP_FMAC4 soap_get___ns1__runCode(struct soap *soap, struct __ns1__runCode *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__runCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__runCode * SOAP_FMAC2 soap_instantiate___ns1__runCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__runCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__runCode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__runCode);
		if (size)
			*size = sizeof(struct __ns1__runCode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__runCode, n);
		if (size)
			*size = n * sizeof(struct __ns1__runCode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__runCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__runCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__runCode %p -> %p\n", q, p));
	*(struct __ns1__runCode*)p = *(struct __ns1__runCode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getName(struct soap *soap, struct __ns1__getName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getName(struct soap *soap, const struct __ns1__getName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getName(soap, &a->ns1__getName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getName(struct soap *soap, const char *tag, int id, const struct __ns1__getName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getName(soap, "ns1:getName", -1, &a->ns1__getName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getName * SOAP_FMAC4 soap_in___ns1__getName(struct soap *soap, const char *tag, struct __ns1__getName *a, const char *type)
{
	size_t soap_flag_ns1__getName = 1;
	short soap_flag;
	a = (struct __ns1__getName *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getName, sizeof(struct __ns1__getName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getName(soap, "ns1:getName", &a->ns1__getName, ""))
				{	soap_flag_ns1__getName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getName(struct soap *soap, const struct __ns1__getName *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getName(soap, tag?tag:"-ns1:getName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getName * SOAP_FMAC4 soap_get___ns1__getName(struct soap *soap, struct __ns1__getName *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getName * SOAP_FMAC2 soap_instantiate___ns1__getName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getName);
		if (size)
			*size = sizeof(struct __ns1__getName);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__getName, n);
		if (size)
			*size = n * sizeof(struct __ns1__getName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__getName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getName %p -> %p\n", q, p));
	*(struct __ns1__getName*)p = *(struct __ns1__getName*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopResponse(struct soap *soap, _ns1__StopResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__StopResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopResponse(struct soap *soap, const char *tag, int id, _ns1__StopResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__StopResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__StopResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopResponse(struct soap *soap, const char *tag, _ns1__StopResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__StopResponse **)soap_malloc(soap, sizeof(_ns1__StopResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__StopResponse *)soap_instantiate__ns1__StopResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__StopResponse ** p = (_ns1__StopResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__StopResponse, sizeof(_ns1__StopResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopResponse(struct soap *soap, _ns1__StopResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__StopResponse);
	if (soap_out_PointerTo_ns1__StopResponse(soap, tag?tag:"ns1:StopResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__StopResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopResponse(struct soap *soap, _ns1__StopResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__StopResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Stop(struct soap *soap, _ns1__Stop *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Stop))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Stop(struct soap *soap, const char *tag, int id, _ns1__Stop *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Stop);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Stop ** SOAP_FMAC4 soap_in_PointerTo_ns1__Stop(struct soap *soap, const char *tag, _ns1__Stop **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Stop **)soap_malloc(soap, sizeof(_ns1__Stop *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Stop *)soap_instantiate__ns1__Stop(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Stop ** p = (_ns1__Stop **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Stop, sizeof(_ns1__Stop), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Stop(struct soap *soap, _ns1__Stop *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Stop);
	if (soap_out_PointerTo_ns1__Stop(soap, tag?tag:"ns1:Stop", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Stop ** SOAP_FMAC4 soap_get_PointerTo_ns1__Stop(struct soap *soap, _ns1__Stop **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Stop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StatusResponse(struct soap *soap, _ns1__StatusResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__StatusResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StatusResponse(struct soap *soap, const char *tag, int id, _ns1__StatusResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__StatusResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__StatusResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__StatusResponse(struct soap *soap, const char *tag, _ns1__StatusResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__StatusResponse **)soap_malloc(soap, sizeof(_ns1__StatusResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__StatusResponse *)soap_instantiate__ns1__StatusResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__StatusResponse ** p = (_ns1__StatusResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__StatusResponse, sizeof(_ns1__StatusResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StatusResponse(struct soap *soap, _ns1__StatusResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__StatusResponse);
	if (soap_out_PointerTo_ns1__StatusResponse(soap, tag?tag:"ns1:StatusResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__StatusResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__StatusResponse(struct soap *soap, _ns1__StatusResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__StatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Status(struct soap *soap, _ns1__Status *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Status))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Status(struct soap *soap, const char *tag, int id, _ns1__Status *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Status);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Status ** SOAP_FMAC4 soap_in_PointerTo_ns1__Status(struct soap *soap, const char *tag, _ns1__Status **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Status **)soap_malloc(soap, sizeof(_ns1__Status *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Status *)soap_instantiate__ns1__Status(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Status ** p = (_ns1__Status **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Status, sizeof(_ns1__Status), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Status(struct soap *soap, _ns1__Status *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Status);
	if (soap_out_PointerTo_ns1__Status(soap, tag?tag:"ns1:Status", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Status ** SOAP_FMAC4 soap_get_PointerTo_ns1__Status(struct soap *soap, _ns1__Status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StartResponse(struct soap *soap, _ns1__StartResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__StartResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StartResponse(struct soap *soap, const char *tag, int id, _ns1__StartResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__StartResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__StartResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__StartResponse(struct soap *soap, const char *tag, _ns1__StartResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__StartResponse **)soap_malloc(soap, sizeof(_ns1__StartResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__StartResponse *)soap_instantiate__ns1__StartResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__StartResponse ** p = (_ns1__StartResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__StartResponse, sizeof(_ns1__StartResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StartResponse(struct soap *soap, _ns1__StartResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__StartResponse);
	if (soap_out_PointerTo_ns1__StartResponse(soap, tag?tag:"ns1:StartResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__StartResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__StartResponse(struct soap *soap, _ns1__StartResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__StartResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Start(struct soap *soap, _ns1__Start *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Start))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Start(struct soap *soap, const char *tag, int id, _ns1__Start *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Start);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Start ** SOAP_FMAC4 soap_in_PointerTo_ns1__Start(struct soap *soap, const char *tag, _ns1__Start **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Start **)soap_malloc(soap, sizeof(_ns1__Start *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Start *)soap_instantiate__ns1__Start(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Start ** p = (_ns1__Start **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Start, sizeof(_ns1__Start), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Start(struct soap *soap, _ns1__Start *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Start);
	if (soap_out_PointerTo_ns1__Start(soap, tag?tag:"ns1:Start", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Start ** SOAP_FMAC4 soap_get_PointerTo_ns1__Start(struct soap *soap, _ns1__Start **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Start(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__runCodeResponse(struct soap *soap, _ns1__runCodeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__runCodeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__runCodeResponse(struct soap *soap, const char *tag, int id, _ns1__runCodeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__runCodeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__runCodeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__runCodeResponse(struct soap *soap, const char *tag, _ns1__runCodeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__runCodeResponse **)soap_malloc(soap, sizeof(_ns1__runCodeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__runCodeResponse *)soap_instantiate__ns1__runCodeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__runCodeResponse ** p = (_ns1__runCodeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__runCodeResponse, sizeof(_ns1__runCodeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__runCodeResponse(struct soap *soap, _ns1__runCodeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__runCodeResponse);
	if (soap_out_PointerTo_ns1__runCodeResponse(soap, tag?tag:"ns1:runCodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__runCodeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__runCodeResponse(struct soap *soap, _ns1__runCodeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__runCodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__runCode(struct soap *soap, _ns1__runCode *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__runCode))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__runCode(struct soap *soap, const char *tag, int id, _ns1__runCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__runCode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__runCode ** SOAP_FMAC4 soap_in_PointerTo_ns1__runCode(struct soap *soap, const char *tag, _ns1__runCode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__runCode **)soap_malloc(soap, sizeof(_ns1__runCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__runCode *)soap_instantiate__ns1__runCode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__runCode ** p = (_ns1__runCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__runCode, sizeof(_ns1__runCode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__runCode(struct soap *soap, _ns1__runCode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__runCode);
	if (soap_out_PointerTo_ns1__runCode(soap, tag?tag:"ns1:runCode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__runCode ** SOAP_FMAC4 soap_get_PointerTo_ns1__runCode(struct soap *soap, _ns1__runCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__runCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getNameResponse(struct soap *soap, _ns1__getNameResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getNameResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getNameResponse(struct soap *soap, const char *tag, int id, _ns1__getNameResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getNameResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getNameResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getNameResponse(struct soap *soap, const char *tag, _ns1__getNameResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getNameResponse **)soap_malloc(soap, sizeof(_ns1__getNameResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getNameResponse *)soap_instantiate__ns1__getNameResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getNameResponse ** p = (_ns1__getNameResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getNameResponse, sizeof(_ns1__getNameResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getNameResponse(struct soap *soap, _ns1__getNameResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getNameResponse);
	if (soap_out_PointerTo_ns1__getNameResponse(soap, tag?tag:"ns1:getNameResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getNameResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getNameResponse(struct soap *soap, _ns1__getNameResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getName(struct soap *soap, _ns1__getName *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getName))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getName(struct soap *soap, const char *tag, int id, _ns1__getName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getName ** SOAP_FMAC4 soap_in_PointerTo_ns1__getName(struct soap *soap, const char *tag, _ns1__getName **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getName **)soap_malloc(soap, sizeof(_ns1__getName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getName *)soap_instantiate__ns1__getName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getName ** p = (_ns1__getName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getName, sizeof(_ns1__getName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getName(struct soap *soap, _ns1__getName *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getName);
	if (soap_out_PointerTo_ns1__getName(soap, tag?tag:"ns1:getName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getName ** SOAP_FMAC4 soap_get_PointerTo_ns1__getName(struct soap *soap, _ns1__getName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
