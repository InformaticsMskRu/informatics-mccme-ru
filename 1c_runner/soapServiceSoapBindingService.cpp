/* soapServiceSoapBindingService.cpp
   Generated by gSOAP 2.8.12 from service.1cws?wsdl.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapServiceSoapBindingService.h"

ServiceSoapBindingService::ServiceSoapBindingService()
{	ServiceSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ServiceSoapBindingService::ServiceSoapBindingService(const struct soap &_soap) : soap(_soap)
{ }

ServiceSoapBindingService::ServiceSoapBindingService(soap_mode iomode)
{	ServiceSoapBindingService_init(iomode, iomode);
}

ServiceSoapBindingService::ServiceSoapBindingService(soap_mode imode, soap_mode omode)
{	ServiceSoapBindingService_init(imode, omode);
}

ServiceSoapBindingService::~ServiceSoapBindingService()
{ }

void ServiceSoapBindingService::ServiceSoapBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://localhost/service", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void ServiceSoapBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ServiceSoapBindingService::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	ServiceSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ServiceSoapBindingService *ServiceSoapBindingService::copy()
{	ServiceSoapBindingService *dup = SOAP_NEW_COPY(ServiceSoapBindingService(*(struct soap*)this));
	return dup;
}
#endif

int ServiceSoapBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int ServiceSoapBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int ServiceSoapBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int ServiceSoapBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int ServiceSoapBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int ServiceSoapBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void ServiceSoapBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ServiceSoapBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ServiceSoapBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void ServiceSoapBindingService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ServiceSoapBindingService::soap_header()
{	return this->header;
}

int ServiceSoapBindingService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET ServiceSoapBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET ServiceSoapBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ServiceSoapBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int ServiceSoapBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__getName(ServiceSoapBindingService*);
static int serve___ns1__runCode(ServiceSoapBindingService*);
static int serve___ns1__Start(ServiceSoapBindingService*);
static int serve___ns1__Status(ServiceSoapBindingService*);
static int serve___ns1__Stop(ServiceSoapBindingService*);
static int serve___ns1__getName_(ServiceSoapBindingService*);
static int serve___ns1__runCode_(ServiceSoapBindingService*);
static int serve___ns1__Start_(ServiceSoapBindingService*);
static int serve___ns1__Status_(ServiceSoapBindingService*);
static int serve___ns1__Stop_(ServiceSoapBindingService*);

int ServiceSoapBindingService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns1:getName"))
		return serve___ns1__getName(this);
	if (!soap_match_tag(this, this->tag, "ns1:runCode"))
		return serve___ns1__runCode(this);
	if (!soap_match_tag(this, this->tag, "ns1:Start"))
		return serve___ns1__Start(this);
	if (!soap_match_tag(this, this->tag, "ns1:Status"))
		return serve___ns1__Status(this);
	if (!soap_match_tag(this, this->tag, "ns1:Stop"))
		return serve___ns1__Stop(this);
	if (!soap_match_tag(this, this->tag, "ns1:getName"))
		return serve___ns1__getName_(this);
	if (!soap_match_tag(this, this->tag, "ns1:runCode"))
		return serve___ns1__runCode_(this);
	if (!soap_match_tag(this, this->tag, "ns1:Start"))
		return serve___ns1__Start_(this);
	if (!soap_match_tag(this, this->tag, "ns1:Status"))
		return serve___ns1__Status_(this);
	if (!soap_match_tag(this, this->tag, "ns1:Stop"))
		return serve___ns1__Stop_(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns1__getName(ServiceSoapBindingService *soap)
{	struct __ns1__getName soap_tmp___ns1__getName;
	_ns1__getNameResponse ns1__getNameResponse;
	ns1__getNameResponse.soap_default(soap);
	soap_default___ns1__getName(soap, &soap_tmp___ns1__getName);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__getName(soap, &soap_tmp___ns1__getName, "-ns1:getName", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getName(soap_tmp___ns1__getName.ns1__getName, &ns1__getNameResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__getNameResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getNameResponse.soap_put(soap, "ns1:getNameResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getNameResponse.soap_put(soap, "ns1:getNameResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__runCode(ServiceSoapBindingService *soap)
{	struct __ns1__runCode soap_tmp___ns1__runCode;
	_ns1__runCodeResponse ns1__runCodeResponse;
	ns1__runCodeResponse.soap_default(soap);
	soap_default___ns1__runCode(soap, &soap_tmp___ns1__runCode);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__runCode(soap, &soap_tmp___ns1__runCode, "-ns1:runCode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->runCode(soap_tmp___ns1__runCode.ns1__runCode, &ns1__runCodeResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__runCodeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__runCodeResponse.soap_put(soap, "ns1:runCodeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__runCodeResponse.soap_put(soap, "ns1:runCodeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__Start(ServiceSoapBindingService *soap)
{	struct __ns1__Start soap_tmp___ns1__Start;
	_ns1__StartResponse ns1__StartResponse;
	ns1__StartResponse.soap_default(soap);
	soap_default___ns1__Start(soap, &soap_tmp___ns1__Start);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Start(soap, &soap_tmp___ns1__Start, "-ns1:Start", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Start(soap_tmp___ns1__Start.ns1__Start, &ns1__StartResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StartResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StartResponse.soap_put(soap, "ns1:StartResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StartResponse.soap_put(soap, "ns1:StartResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__Status(ServiceSoapBindingService *soap)
{	struct __ns1__Status soap_tmp___ns1__Status;
	_ns1__StatusResponse ns1__StatusResponse;
	ns1__StatusResponse.soap_default(soap);
	soap_default___ns1__Status(soap, &soap_tmp___ns1__Status);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Status(soap, &soap_tmp___ns1__Status, "-ns1:Status", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Status(soap_tmp___ns1__Status.ns1__Status, &ns1__StatusResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StatusResponse.soap_put(soap, "ns1:StatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StatusResponse.soap_put(soap, "ns1:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__Stop(ServiceSoapBindingService *soap)
{	struct __ns1__Stop soap_tmp___ns1__Stop;
	_ns1__StopResponse ns1__StopResponse;
	ns1__StopResponse.soap_default(soap);
	soap_default___ns1__Stop(soap, &soap_tmp___ns1__Stop);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Stop(soap, &soap_tmp___ns1__Stop, "-ns1:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Stop(soap_tmp___ns1__Stop.ns1__Stop, &ns1__StopResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StopResponse.soap_put(soap, "ns1:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StopResponse.soap_put(soap, "ns1:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__getName_(ServiceSoapBindingService *soap)
{	struct __ns1__getName_ soap_tmp___ns1__getName_;
	_ns1__getNameResponse ns1__getNameResponse;
	ns1__getNameResponse.soap_default(soap);
	soap_default___ns1__getName_(soap, &soap_tmp___ns1__getName_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__getName_(soap, &soap_tmp___ns1__getName_, "-ns1:getName", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getName_(soap_tmp___ns1__getName_.ns1__getName, &ns1__getNameResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__getNameResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getNameResponse.soap_put(soap, "ns1:getNameResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getNameResponse.soap_put(soap, "ns1:getNameResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__runCode_(ServiceSoapBindingService *soap)
{	struct __ns1__runCode_ soap_tmp___ns1__runCode_;
	_ns1__runCodeResponse ns1__runCodeResponse;
	ns1__runCodeResponse.soap_default(soap);
	soap_default___ns1__runCode_(soap, &soap_tmp___ns1__runCode_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__runCode_(soap, &soap_tmp___ns1__runCode_, "-ns1:runCode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->runCode_(soap_tmp___ns1__runCode_.ns1__runCode, &ns1__runCodeResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__runCodeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__runCodeResponse.soap_put(soap, "ns1:runCodeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__runCodeResponse.soap_put(soap, "ns1:runCodeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__Start_(ServiceSoapBindingService *soap)
{	struct __ns1__Start_ soap_tmp___ns1__Start_;
	_ns1__StartResponse ns1__StartResponse;
	ns1__StartResponse.soap_default(soap);
	soap_default___ns1__Start_(soap, &soap_tmp___ns1__Start_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Start_(soap, &soap_tmp___ns1__Start_, "-ns1:Start", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Start_(soap_tmp___ns1__Start_.ns1__Start, &ns1__StartResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StartResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StartResponse.soap_put(soap, "ns1:StartResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StartResponse.soap_put(soap, "ns1:StartResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__Status_(ServiceSoapBindingService *soap)
{	struct __ns1__Status_ soap_tmp___ns1__Status_;
	_ns1__StatusResponse ns1__StatusResponse;
	ns1__StatusResponse.soap_default(soap);
	soap_default___ns1__Status_(soap, &soap_tmp___ns1__Status_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Status_(soap, &soap_tmp___ns1__Status_, "-ns1:Status", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Status_(soap_tmp___ns1__Status_.ns1__Status, &ns1__StatusResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StatusResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StatusResponse.soap_put(soap, "ns1:StatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StatusResponse.soap_put(soap, "ns1:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__Stop_(ServiceSoapBindingService *soap)
{	struct __ns1__Stop_ soap_tmp___ns1__Stop_;
	_ns1__StopResponse ns1__StopResponse;
	ns1__StopResponse.soap_default(soap);
	soap_default___ns1__Stop_(soap, &soap_tmp___ns1__Stop_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__Stop_(soap, &soap_tmp___ns1__Stop_, "-ns1:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Stop_(soap_tmp___ns1__Stop_.ns1__Stop, &ns1__StopResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__StopResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StopResponse.soap_put(soap, "ns1:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StopResponse.soap_put(soap, "ns1:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
