/* soapStub.h
   Generated by gSOAP 2.8.12 from service.1cws?wsdl.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://localhost/service"
#define SOAP_NAMESPACE_OF_ns1	"http://localhost/service"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20812
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__getName
#define SOAP_TYPE__ns1__getName (8)
/* ns1:getName */
class SOAP_CMAC _ns1__getName
{
public:
	std::string Code;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE__ns1__getName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getName() { _ns1__getName::soap_default(NULL); }
	virtual ~_ns1__getName() { }
};
#endif

#ifndef SOAP_TYPE__ns1__getNameResponse
#define SOAP_TYPE__ns1__getNameResponse (9)
/* ns1:getNameResponse */
class SOAP_CMAC _ns1__getNameResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__ns1__getNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__getNameResponse() { _ns1__getNameResponse::soap_default(NULL); }
	virtual ~_ns1__getNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__runCode
#define SOAP_TYPE__ns1__runCode (10)
/* ns1:runCode */
class SOAP_CMAC _ns1__runCode
{
public:
	std::string Source;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__runCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__runCode() { _ns1__runCode::soap_default(NULL); }
	virtual ~_ns1__runCode() { }
};
#endif

#ifndef SOAP_TYPE__ns1__runCodeResponse
#define SOAP_TYPE__ns1__runCodeResponse (11)
/* ns1:runCodeResponse */
class SOAP_CMAC _ns1__runCodeResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__runCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__runCodeResponse() { _ns1__runCodeResponse::soap_default(NULL); }
	virtual ~_ns1__runCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Start
#define SOAP_TYPE__ns1__Start (12)
/* ns1:Start */
class SOAP_CMAC _ns1__Start
{
public:
	std::string Uuid;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__Start */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Start() { _ns1__Start::soap_default(NULL); }
	virtual ~_ns1__Start() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StartResponse
#define SOAP_TYPE__ns1__StartResponse (13)
/* ns1:StartResponse */
class SOAP_CMAC _ns1__StartResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns1__StartResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StartResponse() { _ns1__StartResponse::soap_default(NULL); }
	virtual ~_ns1__StartResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Status
#define SOAP_TYPE__ns1__Status (14)
/* ns1:Status */
class SOAP_CMAC _ns1__Status
{
public:
	std::string ID;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns1__Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Status() { _ns1__Status::soap_default(NULL); }
	virtual ~_ns1__Status() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StatusResponse
#define SOAP_TYPE__ns1__StatusResponse (15)
/* ns1:StatusResponse */
class SOAP_CMAC _ns1__StatusResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__StatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StatusResponse() { _ns1__StatusResponse::soap_default(NULL); }
	virtual ~_ns1__StatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__Stop
#define SOAP_TYPE__ns1__Stop (16)
/* ns1:Stop */
class SOAP_CMAC _ns1__Stop
{
public:
	std::string ID;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Stop() { _ns1__Stop::soap_default(NULL); }
	virtual ~_ns1__Stop() { }
};
#endif

#ifndef SOAP_TYPE__ns1__StopResponse
#define SOAP_TYPE__ns1__StopResponse (17)
/* ns1:StopResponse */
class SOAP_CMAC _ns1__StopResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__StopResponse() { _ns1__StopResponse::soap_default(NULL); }
	virtual ~_ns1__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__getName
#define SOAP_TYPE___ns1__getName (23)
/* Operation wrapper: */
struct __ns1__getName
{
public:
	_ns1__getName *ns1__getName;	/* optional element of type ns1:getName */
public:
	int soap_type() const { return 23; } /* = unique id SOAP_TYPE___ns1__getName */
};
#endif

#ifndef SOAP_TYPE___ns1__runCode
#define SOAP_TYPE___ns1__runCode (27)
/* Operation wrapper: */
struct __ns1__runCode
{
public:
	_ns1__runCode *ns1__runCode;	/* optional element of type ns1:runCode */
public:
	int soap_type() const { return 27; } /* = unique id SOAP_TYPE___ns1__runCode */
};
#endif

#ifndef SOAP_TYPE___ns1__Start
#define SOAP_TYPE___ns1__Start (31)
/* Operation wrapper: */
struct __ns1__Start
{
public:
	_ns1__Start *ns1__Start;	/* optional element of type ns1:Start */
public:
	int soap_type() const { return 31; } /* = unique id SOAP_TYPE___ns1__Start */
};
#endif

#ifndef SOAP_TYPE___ns1__Status
#define SOAP_TYPE___ns1__Status (35)
/* Operation wrapper: */
struct __ns1__Status
{
public:
	_ns1__Status *ns1__Status;	/* optional element of type ns1:Status */
public:
	int soap_type() const { return 35; } /* = unique id SOAP_TYPE___ns1__Status */
};
#endif

#ifndef SOAP_TYPE___ns1__Stop
#define SOAP_TYPE___ns1__Stop (39)
/* Operation wrapper: */
struct __ns1__Stop
{
public:
	_ns1__Stop *ns1__Stop;	/* optional element of type ns1:Stop */
public:
	int soap_type() const { return 39; } /* = unique id SOAP_TYPE___ns1__Stop */
};
#endif

#ifndef SOAP_TYPE___ns1__getName_
#define SOAP_TYPE___ns1__getName_ (41)
/* Operation wrapper: */
struct __ns1__getName_
{
public:
	_ns1__getName *ns1__getName;	/* optional element of type ns1:getName */
public:
	int soap_type() const { return 41; } /* = unique id SOAP_TYPE___ns1__getName_ */
};
#endif

#ifndef SOAP_TYPE___ns1__runCode_
#define SOAP_TYPE___ns1__runCode_ (43)
/* Operation wrapper: */
struct __ns1__runCode_
{
public:
	_ns1__runCode *ns1__runCode;	/* optional element of type ns1:runCode */
public:
	int soap_type() const { return 43; } /* = unique id SOAP_TYPE___ns1__runCode_ */
};
#endif

#ifndef SOAP_TYPE___ns1__Start_
#define SOAP_TYPE___ns1__Start_ (45)
/* Operation wrapper: */
struct __ns1__Start_
{
public:
	_ns1__Start *ns1__Start;	/* optional element of type ns1:Start */
public:
	int soap_type() const { return 45; } /* = unique id SOAP_TYPE___ns1__Start_ */
};
#endif

#ifndef SOAP_TYPE___ns1__Status_
#define SOAP_TYPE___ns1__Status_ (47)
/* Operation wrapper: */
struct __ns1__Status_
{
public:
	_ns1__Status *ns1__Status;	/* optional element of type ns1:Status */
public:
	int soap_type() const { return 47; } /* = unique id SOAP_TYPE___ns1__Status_ */
};
#endif

#ifndef SOAP_TYPE___ns1__Stop_
#define SOAP_TYPE___ns1__Stop_ (49)
/* Operation wrapper: */
struct __ns1__Stop_
{
public:
	_ns1__Stop *ns1__Stop;	/* optional element of type ns1:Stop */
public:
	int soap_type() const { return 49; } /* = unique id SOAP_TYPE___ns1__Stop_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (50)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 50; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (51)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 51; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (53)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 53; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (56)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 56; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (57)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 57; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
