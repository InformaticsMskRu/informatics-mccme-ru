/* service.1cws?wsdl.h
   Generated by wsdl2h 2.8.12 from service.1cws?wsdl and typemap.dat
   2014-05-13 16:43:34 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on service.1cws?wsdl.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Use wsdl2h option -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://localhost/service"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://localhost/service"
//gsoap ns1   schema namespace:	http://localhost/service
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://localhost/service"
//gsoap ns1   schema namespace:	http://localhost/service
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__getName.
class _ns1__getName;

//  Forward declaration of class _ns1__getNameResponse.
class _ns1__getNameResponse;

//  Forward declaration of class _ns1__runCode.
class _ns1__runCode;

//  Forward declaration of class _ns1__runCodeResponse.
class _ns1__runCodeResponse;

//  Forward declaration of class _ns1__Start.
class _ns1__Start;

//  Forward declaration of class _ns1__StartResponse.
class _ns1__StartResponse;

//  Forward declaration of class _ns1__Status.
class _ns1__Status;

//  Forward declaration of class _ns1__StatusResponse.
class _ns1__StatusResponse;

//  Forward declaration of class _ns1__Stop.
class _ns1__Stop;

//  Forward declaration of class _ns1__StopResponse.
class _ns1__StopResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://localhost/service":getName

/// "http://localhost/service":getName is a complexType.
/// class _ns1__getName operations:
/// - soap_new__ns1__getName(soap*) allocate
/// - soap_new__ns1__getName(soap*, int num) allocate array
/// - soap_new_req__ns1__getName(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getName(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getName(soap*, _ns1__getName*) deserialize from a stream
/// - int soap_write__ns1__getName(soap, _ns1__getName*) serialize to a stream
class _ns1__getName
{ public:
/// Element Code of type xs:string.
    std::string                          Code                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":getNameResponse

/// "http://localhost/service":getNameResponse is a complexType.
/// class _ns1__getNameResponse operations:
/// - soap_new__ns1__getNameResponse(soap*) allocate
/// - soap_new__ns1__getNameResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getNameResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getNameResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getNameResponse(soap*, _ns1__getNameResponse*) deserialize from a stream
/// - int soap_write__ns1__getNameResponse(soap, _ns1__getNameResponse*) serialize to a stream
class _ns1__getNameResponse
{ public:
/// Element return of type xs:string.
    std::string                          return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":runCode

/// "http://localhost/service":runCode is a complexType.
/// class _ns1__runCode operations:
/// - soap_new__ns1__runCode(soap*) allocate
/// - soap_new__ns1__runCode(soap*, int num) allocate array
/// - soap_new_req__ns1__runCode(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__runCode(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__runCode(soap*, _ns1__runCode*) deserialize from a stream
/// - int soap_write__ns1__runCode(soap, _ns1__runCode*) serialize to a stream
class _ns1__runCode
{ public:
/// Element Source of type xs:string.
    std::string                          Source                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":runCodeResponse

/// "http://localhost/service":runCodeResponse is a complexType.
/// class _ns1__runCodeResponse operations:
/// - soap_new__ns1__runCodeResponse(soap*) allocate
/// - soap_new__ns1__runCodeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__runCodeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__runCodeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__runCodeResponse(soap*, _ns1__runCodeResponse*) deserialize from a stream
/// - int soap_write__ns1__runCodeResponse(soap, _ns1__runCodeResponse*) serialize to a stream
class _ns1__runCodeResponse
{ public:
/// Element return of type xs:string.
    std::string                          return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":Start

/// "http://localhost/service":Start is a complexType.
/// class _ns1__Start operations:
/// - soap_new__ns1__Start(soap*) allocate
/// - soap_new__ns1__Start(soap*, int num) allocate array
/// - soap_new_req__ns1__Start(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Start(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Start(soap*, _ns1__Start*) deserialize from a stream
/// - int soap_write__ns1__Start(soap, _ns1__Start*) serialize to a stream
class _ns1__Start
{ public:
/// Element Uuid of type xs:string.
    std::string                          Uuid                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":StartResponse

/// "http://localhost/service":StartResponse is a complexType.
/// class _ns1__StartResponse operations:
/// - soap_new__ns1__StartResponse(soap*) allocate
/// - soap_new__ns1__StartResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__StartResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__StartResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__StartResponse(soap*, _ns1__StartResponse*) deserialize from a stream
/// - int soap_write__ns1__StartResponse(soap, _ns1__StartResponse*) serialize to a stream
class _ns1__StartResponse
{ public:
/// Element return of type xs:string.
    std::string                          return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":Status

/// "http://localhost/service":Status is a complexType.
/// class _ns1__Status operations:
/// - soap_new__ns1__Status(soap*) allocate
/// - soap_new__ns1__Status(soap*, int num) allocate array
/// - soap_new_req__ns1__Status(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Status(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Status(soap*, _ns1__Status*) deserialize from a stream
/// - int soap_write__ns1__Status(soap, _ns1__Status*) serialize to a stream
class _ns1__Status
{ public:
/// Element ID of type xs:string.
    std::string                          ID                             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":StatusResponse

/// "http://localhost/service":StatusResponse is a complexType.
/// class _ns1__StatusResponse operations:
/// - soap_new__ns1__StatusResponse(soap*) allocate
/// - soap_new__ns1__StatusResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__StatusResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__StatusResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__StatusResponse(soap*, _ns1__StatusResponse*) deserialize from a stream
/// - int soap_write__ns1__StatusResponse(soap, _ns1__StatusResponse*) serialize to a stream
class _ns1__StatusResponse
{ public:
/// Element return of type xs:string.
    std::string                          return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":Stop

/// "http://localhost/service":Stop is a complexType.
/// class _ns1__Stop operations:
/// - soap_new__ns1__Stop(soap*) allocate
/// - soap_new__ns1__Stop(soap*, int num) allocate array
/// - soap_new_req__ns1__Stop(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Stop(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Stop(soap*, _ns1__Stop*) deserialize from a stream
/// - int soap_write__ns1__Stop(soap, _ns1__Stop*) serialize to a stream
class _ns1__Stop
{ public:
/// Element ID of type xs:string.
    std::string                          ID                             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://localhost/service":StopResponse

/// "http://localhost/service":StopResponse is a complexType.
/// class _ns1__StopResponse operations:
/// - soap_new__ns1__StopResponse(soap*) allocate
/// - soap_new__ns1__StopResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__StopResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__StopResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__StopResponse(soap*, _ns1__StopResponse*) deserialize from a stream
/// - int soap_write__ns1__StopResponse(soap, _ns1__StopResponse*) serialize to a stream
class _ns1__StopResponse
{ public:
/// Element return of type xs:string.
    std::string                          return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://localhost/service                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	ServiceSoapBinding 
//gsoap ns1  service type:	ServicePortType 
//gsoap ns1  service port:	http://192.168.56.11/test/ws/service.1cws 
//gsoap ns1  service namespace:	http://localhost/service 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref ServiceSoapBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ServiceSoapBinding Binding "ServiceSoapBinding"

@section ServiceSoap_port Port Documentation "ServiceSoap"
 
				<wsi:Claim xmlns:wsi="http://ws-i.org/schemas/conformanceClaim/"
						conformsTo="http://ws-i.org/profiles/basic/1.1"/>
			

@section ServiceSoapBinding_operations Operations of Binding  "ServiceSoapBinding"

  - @ref __ns1__getName

  - @ref __ns1__runCode

  - @ref __ns1__Start

  - @ref __ns1__Status

  - @ref __ns1__Stop

  - @ref __ns1__getName_

  - @ref __ns1__runCode_

  - @ref __ns1__Start_

  - @ref __ns1__Status_

  - @ref __ns1__Stop_

@section ServiceSoapBinding_ports Endpoints of Binding  "ServiceSoapBinding"

  - http://192.168.56.11/test/ws/service.1cws

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ServiceSoapBinding                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getName                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getName" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:getName"

  - Addressing input action: "http://localhost/service/ServicePortType/getName"

  - Addressing input output action: "http://localhost/service/ServicePortType/getNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getName*                      ns1__getName,
    // output parameters:
    _ns1__getNameResponse*              ns1__getNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getName(
    struct soap *soap,
    // input parameters:
    _ns1__getName*                      ns1__getName,
    // output parameters:
    _ns1__getNameResponse*              ns1__getNameResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getName SOAP
//gsoap ns1  service method-style:	getName document
//gsoap ns1  service method-encoding:	getName literal
//gsoap ns1  service method-action:	getName http://localhost/service#Service:getName
//gsoap ns1  service method-output-action:	getName http://localhost/service/ServicePortType/getNameResponse
int __ns1__getName(
    _ns1__getName*                      ns1__getName,	///< Input parameter
    _ns1__getNameResponse*              ns1__getNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__runCode                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__runCode" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:runCode"

  - Addressing input action: "http://localhost/service/ServicePortType/runCode"

  - Addressing input output action: "http://localhost/service/ServicePortType/runCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__runCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__runCode*                      ns1__runCode,
    // output parameters:
    _ns1__runCodeResponse*              ns1__runCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__runCode(
    struct soap *soap,
    // input parameters:
    _ns1__runCode*                      ns1__runCode,
    // output parameters:
    _ns1__runCodeResponse*              ns1__runCodeResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	runCode SOAP
//gsoap ns1  service method-style:	runCode document
//gsoap ns1  service method-encoding:	runCode literal
//gsoap ns1  service method-action:	runCode http://localhost/service#Service:runCode
//gsoap ns1  service method-output-action:	runCode http://localhost/service/ServicePortType/runCodeResponse
int __ns1__runCode(
    _ns1__runCode*                      ns1__runCode,	///< Input parameter
    _ns1__runCodeResponse*              ns1__runCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Start                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Start" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:Start"

  - Addressing input action: "http://localhost/service/ServicePortType/Start"

  - Addressing input output action: "http://localhost/service/ServicePortType/StartResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Start(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Start*                        ns1__Start,
    // output parameters:
    _ns1__StartResponse*                ns1__StartResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Start(
    struct soap *soap,
    // input parameters:
    _ns1__Start*                        ns1__Start,
    // output parameters:
    _ns1__StartResponse*                ns1__StartResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Start SOAP
//gsoap ns1  service method-style:	Start document
//gsoap ns1  service method-encoding:	Start literal
//gsoap ns1  service method-action:	Start http://localhost/service#Service:Start
//gsoap ns1  service method-output-action:	Start http://localhost/service/ServicePortType/StartResponse
int __ns1__Start(
    _ns1__Start*                        ns1__Start,	///< Input parameter
    _ns1__StartResponse*                ns1__StartResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Status                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Status" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:Status"

  - Addressing input action: "http://localhost/service/ServicePortType/Status"

  - Addressing input output action: "http://localhost/service/ServicePortType/StatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Status(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Status*                       ns1__Status,
    // output parameters:
    _ns1__StatusResponse*               ns1__StatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Status(
    struct soap *soap,
    // input parameters:
    _ns1__Status*                       ns1__Status,
    // output parameters:
    _ns1__StatusResponse*               ns1__StatusResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Status SOAP
//gsoap ns1  service method-style:	Status document
//gsoap ns1  service method-encoding:	Status literal
//gsoap ns1  service method-action:	Status http://localhost/service#Service:Status
//gsoap ns1  service method-output-action:	Status http://localhost/service/ServicePortType/StatusResponse
int __ns1__Status(
    _ns1__Status*                       ns1__Status,	///< Input parameter
    _ns1__StatusResponse*               ns1__StatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Stop                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Stop" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:Stop"

  - Addressing input action: "http://localhost/service/ServicePortType/Stop"

  - Addressing input output action: "http://localhost/service/ServicePortType/StopResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Stop(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Stop*                         ns1__Stop,
    // output parameters:
    _ns1__StopResponse*                 ns1__StopResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Stop(
    struct soap *soap,
    // input parameters:
    _ns1__Stop*                         ns1__Stop,
    // output parameters:
    _ns1__StopResponse*                 ns1__StopResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Stop SOAP
//gsoap ns1  service method-style:	Stop document
//gsoap ns1  service method-encoding:	Stop literal
//gsoap ns1  service method-action:	Stop http://localhost/service#Service:Stop
//gsoap ns1  service method-output-action:	Stop http://localhost/service/ServicePortType/StopResponse
int __ns1__Stop(
    _ns1__Stop*                         ns1__Stop,	///< Input parameter
    _ns1__StopResponse*                 ns1__StopResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getName_                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getName_" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:getName"

  - Addressing input action: "http://localhost/service/ServicePortType/getName"

  - Addressing input output action: "http://localhost/service/ServicePortType/getNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getName_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getName*                      ns1__getName,
    // output parameters:
    _ns1__getNameResponse*              ns1__getNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getName_(
    struct soap *soap,
    // input parameters:
    _ns1__getName*                      ns1__getName,
    // output parameters:
    _ns1__getNameResponse*              ns1__getNameResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getName_ SOAP
//gsoap ns1  service method-style:	getName_ document
//gsoap ns1  service method-encoding:	getName_ literal
//gsoap ns1  service method-action:	getName_ http://localhost/service#Service:getName
//gsoap ns1  service method-output-action:	getName_ http://localhost/service/ServicePortType/getNameResponse
int __ns1__getName_(
    _ns1__getName*                      ns1__getName,	///< Input parameter
    _ns1__getNameResponse*              ns1__getNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__runCode_                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__runCode_" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:runCode"

  - Addressing input action: "http://localhost/service/ServicePortType/runCode"

  - Addressing input output action: "http://localhost/service/ServicePortType/runCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__runCode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__runCode*                      ns1__runCode,
    // output parameters:
    _ns1__runCodeResponse*              ns1__runCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__runCode_(
    struct soap *soap,
    // input parameters:
    _ns1__runCode*                      ns1__runCode,
    // output parameters:
    _ns1__runCodeResponse*              ns1__runCodeResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	runCode_ SOAP
//gsoap ns1  service method-style:	runCode_ document
//gsoap ns1  service method-encoding:	runCode_ literal
//gsoap ns1  service method-action:	runCode_ http://localhost/service#Service:runCode
//gsoap ns1  service method-output-action:	runCode_ http://localhost/service/ServicePortType/runCodeResponse
int __ns1__runCode_(
    _ns1__runCode*                      ns1__runCode,	///< Input parameter
    _ns1__runCodeResponse*              ns1__runCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Start_                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Start_" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:Start"

  - Addressing input action: "http://localhost/service/ServicePortType/Start"

  - Addressing input output action: "http://localhost/service/ServicePortType/StartResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Start_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Start*                        ns1__Start,
    // output parameters:
    _ns1__StartResponse*                ns1__StartResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Start_(
    struct soap *soap,
    // input parameters:
    _ns1__Start*                        ns1__Start,
    // output parameters:
    _ns1__StartResponse*                ns1__StartResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Start_ SOAP
//gsoap ns1  service method-style:	Start_ document
//gsoap ns1  service method-encoding:	Start_ literal
//gsoap ns1  service method-action:	Start_ http://localhost/service#Service:Start
//gsoap ns1  service method-output-action:	Start_ http://localhost/service/ServicePortType/StartResponse
int __ns1__Start_(
    _ns1__Start*                        ns1__Start,	///< Input parameter
    _ns1__StartResponse*                ns1__StartResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Status_                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Status_" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:Status"

  - Addressing input action: "http://localhost/service/ServicePortType/Status"

  - Addressing input output action: "http://localhost/service/ServicePortType/StatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Status_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Status*                       ns1__Status,
    // output parameters:
    _ns1__StatusResponse*               ns1__StatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Status_(
    struct soap *soap,
    // input parameters:
    _ns1__Status*                       ns1__Status,
    // output parameters:
    _ns1__StatusResponse*               ns1__StatusResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Status_ SOAP
//gsoap ns1  service method-style:	Status_ document
//gsoap ns1  service method-encoding:	Status_ literal
//gsoap ns1  service method-action:	Status_ http://localhost/service#Service:Status
//gsoap ns1  service method-output-action:	Status_ http://localhost/service/ServicePortType/StatusResponse
int __ns1__Status_(
    _ns1__Status*                       ns1__Status,	///< Input parameter
    _ns1__StatusResponse*               ns1__StatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Stop_                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Stop_" of service binding "ServiceSoapBinding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "http://localhost/service#Service:Stop"

  - Addressing input action: "http://localhost/service/ServicePortType/Stop"

  - Addressing input output action: "http://localhost/service/ServicePortType/StopResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Stop_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Stop*                         ns1__Stop,
    // output parameters:
    _ns1__StopResponse*                 ns1__StopResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Stop_(
    struct soap *soap,
    // input parameters:
    _ns1__Stop*                         ns1__Stop,
    // output parameters:
    _ns1__StopResponse*                 ns1__StopResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapBindingProxy.h):
@code
  class ServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapBindingService.h):
@code
  class ServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Stop_ SOAP
//gsoap ns1  service method-style:	Stop_ document
//gsoap ns1  service method-encoding:	Stop_ literal
//gsoap ns1  service method-action:	Stop_ http://localhost/service#Service:Stop
//gsoap ns1  service method-output-action:	Stop_ http://localhost/service/ServicePortType/StopResponse
int __ns1__Stop_(
    _ns1__Stop*                         ns1__Stop,	///< Input parameter
    _ns1__StopResponse*                 ns1__StopResponse	///< Output parameter
);

/**

@page ServiceSoapBinding Binding "ServiceSoapBinding"

@section ServiceSoapBinding_policy_enablers Policy Enablers of Binding  "ServiceSoapBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://localhost/service"

  - <ns1:getName> @ref _ns1__getName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getName(struct soap*, _ns1__getName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getName(struct soap*, _ns1__getName*);
    @endcode

  - <ns1:getNameResponse> @ref _ns1__getNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getNameResponse(struct soap*, _ns1__getNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getNameResponse(struct soap*, _ns1__getNameResponse*);
    @endcode

  - <ns1:runCode> @ref _ns1__runCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__runCode(struct soap*, _ns1__runCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__runCode(struct soap*, _ns1__runCode*);
    @endcode

  - <ns1:runCodeResponse> @ref _ns1__runCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__runCodeResponse(struct soap*, _ns1__runCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__runCodeResponse(struct soap*, _ns1__runCodeResponse*);
    @endcode

  - <ns1:Start> @ref _ns1__Start
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Start(struct soap*, _ns1__Start*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Start(struct soap*, _ns1__Start*);
    @endcode

  - <ns1:StartResponse> @ref _ns1__StartResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StartResponse(struct soap*, _ns1__StartResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StartResponse(struct soap*, _ns1__StartResponse*);
    @endcode

  - <ns1:Status> @ref _ns1__Status
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Status(struct soap*, _ns1__Status*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Status(struct soap*, _ns1__Status*);
    @endcode

  - <ns1:StatusResponse> @ref _ns1__StatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StatusResponse(struct soap*, _ns1__StatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StatusResponse(struct soap*, _ns1__StatusResponse*);
    @endcode

  - <ns1:Stop> @ref _ns1__Stop
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Stop(struct soap*, _ns1__Stop*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Stop(struct soap*, _ns1__Stop*);
    @endcode

  - <ns1:StopResponse> @ref _ns1__StopResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopResponse(struct soap*, _ns1__StopResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopResponse(struct soap*, _ns1__StopResponse*);
    @endcode

@section ns1 Top-level root elements of schema "http://localhost/service"

*/

/* End of service.1cws?wsdl.h */
