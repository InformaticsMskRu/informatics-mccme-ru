/* soapH.h
   Generated by gSOAP 2.8.12 from service.1cws?wsdl.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StopResponse
#define SOAP_TYPE__ns1__StopResponse (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopResponse(struct soap*, const char*, int, const _ns1__StopResponse *, const char*);
SOAP_FMAC3 _ns1__StopResponse * SOAP_FMAC4 soap_in__ns1__StopResponse(struct soap*, const char*, _ns1__StopResponse *, const char*);

#ifndef soap_write__ns1__StopResponse
#define soap_write__ns1__StopResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:StopResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__StopResponse * SOAP_FMAC4 soap_get__ns1__StopResponse(struct soap*, _ns1__StopResponse *, const char*, const char*);

#ifndef soap_read__ns1__StopResponse
#define soap_read__ns1__StopResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StopResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__StopResponse * SOAP_FMAC2 soap_instantiate__ns1__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopResponse * soap_new__ns1__StopResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StopResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__StopResponse * soap_new_req__ns1__StopResponse(struct soap *soap, std::string& return_) { _ns1__StopResponse *_p = soap_instantiate__ns1__StopResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__StopResponse::return_ = return_; return _p; }

inline _ns1__StopResponse * soap_new_set__ns1__StopResponse(struct soap *soap, std::string& return_) { _ns1__StopResponse *_p = soap_instantiate__ns1__StopResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__StopResponse::return_ = return_; return _p; }

inline void soap_delete__ns1__StopResponse(struct soap *soap, _ns1__StopResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StopResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Stop
#define SOAP_TYPE__ns1__Stop (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Stop(struct soap*, const char*, int, const _ns1__Stop *, const char*);
SOAP_FMAC3 _ns1__Stop * SOAP_FMAC4 soap_in__ns1__Stop(struct soap*, const char*, _ns1__Stop *, const char*);

#ifndef soap_write__ns1__Stop
#define soap_write__ns1__Stop(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Stop", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__Stop * SOAP_FMAC4 soap_get__ns1__Stop(struct soap*, _ns1__Stop *, const char*, const char*);

#ifndef soap_read__ns1__Stop
#define soap_read__ns1__Stop(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Stop(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__Stop * SOAP_FMAC2 soap_instantiate__ns1__Stop(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Stop * soap_new__ns1__Stop(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Stop(soap, n, NULL, NULL, NULL); }

inline _ns1__Stop * soap_new_req__ns1__Stop(struct soap *soap, std::string& ID) { _ns1__Stop *_p = soap_instantiate__ns1__Stop(soap, -1, NULL, NULL, NULL); _p->_ns1__Stop::ID = ID; return _p; }

inline _ns1__Stop * soap_new_set__ns1__Stop(struct soap *soap, std::string& ID) { _ns1__Stop *_p = soap_instantiate__ns1__Stop(soap, -1, NULL, NULL, NULL); _p->_ns1__Stop::ID = ID; return _p; }

inline void soap_delete__ns1__Stop(struct soap *soap, _ns1__Stop *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Stop(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StatusResponse
#define SOAP_TYPE__ns1__StatusResponse (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StatusResponse(struct soap*, const char*, int, const _ns1__StatusResponse *, const char*);
SOAP_FMAC3 _ns1__StatusResponse * SOAP_FMAC4 soap_in__ns1__StatusResponse(struct soap*, const char*, _ns1__StatusResponse *, const char*);

#ifndef soap_write__ns1__StatusResponse
#define soap_write__ns1__StatusResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:StatusResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__StatusResponse * SOAP_FMAC4 soap_get__ns1__StatusResponse(struct soap*, _ns1__StatusResponse *, const char*, const char*);

#ifndef soap_read__ns1__StatusResponse
#define soap_read__ns1__StatusResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StatusResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__StatusResponse * SOAP_FMAC2 soap_instantiate__ns1__StatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StatusResponse * soap_new__ns1__StatusResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StatusResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__StatusResponse * soap_new_req__ns1__StatusResponse(struct soap *soap, std::string& return_) { _ns1__StatusResponse *_p = soap_instantiate__ns1__StatusResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__StatusResponse::return_ = return_; return _p; }

inline _ns1__StatusResponse * soap_new_set__ns1__StatusResponse(struct soap *soap, std::string& return_) { _ns1__StatusResponse *_p = soap_instantiate__ns1__StatusResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__StatusResponse::return_ = return_; return _p; }

inline void soap_delete__ns1__StatusResponse(struct soap *soap, _ns1__StatusResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StatusResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Status
#define SOAP_TYPE__ns1__Status (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Status(struct soap*, const char*, int, const _ns1__Status *, const char*);
SOAP_FMAC3 _ns1__Status * SOAP_FMAC4 soap_in__ns1__Status(struct soap*, const char*, _ns1__Status *, const char*);

#ifndef soap_write__ns1__Status
#define soap_write__ns1__Status(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Status", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__Status * SOAP_FMAC4 soap_get__ns1__Status(struct soap*, _ns1__Status *, const char*, const char*);

#ifndef soap_read__ns1__Status
#define soap_read__ns1__Status(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Status(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__Status * SOAP_FMAC2 soap_instantiate__ns1__Status(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Status * soap_new__ns1__Status(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Status(soap, n, NULL, NULL, NULL); }

inline _ns1__Status * soap_new_req__ns1__Status(struct soap *soap, std::string& ID) { _ns1__Status *_p = soap_instantiate__ns1__Status(soap, -1, NULL, NULL, NULL); _p->_ns1__Status::ID = ID; return _p; }

inline _ns1__Status * soap_new_set__ns1__Status(struct soap *soap, std::string& ID) { _ns1__Status *_p = soap_instantiate__ns1__Status(soap, -1, NULL, NULL, NULL); _p->_ns1__Status::ID = ID; return _p; }

inline void soap_delete__ns1__Status(struct soap *soap, _ns1__Status *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Status(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StartResponse
#define SOAP_TYPE__ns1__StartResponse (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StartResponse(struct soap*, const char*, int, const _ns1__StartResponse *, const char*);
SOAP_FMAC3 _ns1__StartResponse * SOAP_FMAC4 soap_in__ns1__StartResponse(struct soap*, const char*, _ns1__StartResponse *, const char*);

#ifndef soap_write__ns1__StartResponse
#define soap_write__ns1__StartResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:StartResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__StartResponse * SOAP_FMAC4 soap_get__ns1__StartResponse(struct soap*, _ns1__StartResponse *, const char*, const char*);

#ifndef soap_read__ns1__StartResponse
#define soap_read__ns1__StartResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StartResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__StartResponse * SOAP_FMAC2 soap_instantiate__ns1__StartResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StartResponse * soap_new__ns1__StartResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StartResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__StartResponse * soap_new_req__ns1__StartResponse(struct soap *soap, std::string& return_) { _ns1__StartResponse *_p = soap_instantiate__ns1__StartResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__StartResponse::return_ = return_; return _p; }

inline _ns1__StartResponse * soap_new_set__ns1__StartResponse(struct soap *soap, std::string& return_) { _ns1__StartResponse *_p = soap_instantiate__ns1__StartResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__StartResponse::return_ = return_; return _p; }

inline void soap_delete__ns1__StartResponse(struct soap *soap, _ns1__StartResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StartResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Start
#define SOAP_TYPE__ns1__Start (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Start(struct soap*, const char*, int, const _ns1__Start *, const char*);
SOAP_FMAC3 _ns1__Start * SOAP_FMAC4 soap_in__ns1__Start(struct soap*, const char*, _ns1__Start *, const char*);

#ifndef soap_write__ns1__Start
#define soap_write__ns1__Start(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Start", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__Start * SOAP_FMAC4 soap_get__ns1__Start(struct soap*, _ns1__Start *, const char*, const char*);

#ifndef soap_read__ns1__Start
#define soap_read__ns1__Start(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Start(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__Start * SOAP_FMAC2 soap_instantiate__ns1__Start(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Start * soap_new__ns1__Start(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Start(soap, n, NULL, NULL, NULL); }

inline _ns1__Start * soap_new_req__ns1__Start(struct soap *soap, std::string& Uuid) { _ns1__Start *_p = soap_instantiate__ns1__Start(soap, -1, NULL, NULL, NULL); _p->_ns1__Start::Uuid = Uuid; return _p; }

inline _ns1__Start * soap_new_set__ns1__Start(struct soap *soap, std::string& Uuid) { _ns1__Start *_p = soap_instantiate__ns1__Start(soap, -1, NULL, NULL, NULL); _p->_ns1__Start::Uuid = Uuid; return _p; }

inline void soap_delete__ns1__Start(struct soap *soap, _ns1__Start *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Start(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__runCodeResponse
#define SOAP_TYPE__ns1__runCodeResponse (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__runCodeResponse(struct soap*, const char*, int, const _ns1__runCodeResponse *, const char*);
SOAP_FMAC3 _ns1__runCodeResponse * SOAP_FMAC4 soap_in__ns1__runCodeResponse(struct soap*, const char*, _ns1__runCodeResponse *, const char*);

#ifndef soap_write__ns1__runCodeResponse
#define soap_write__ns1__runCodeResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:runCodeResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__runCodeResponse * SOAP_FMAC4 soap_get__ns1__runCodeResponse(struct soap*, _ns1__runCodeResponse *, const char*, const char*);

#ifndef soap_read__ns1__runCodeResponse
#define soap_read__ns1__runCodeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__runCodeResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__runCodeResponse * SOAP_FMAC2 soap_instantiate__ns1__runCodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__runCodeResponse * soap_new__ns1__runCodeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__runCodeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__runCodeResponse * soap_new_req__ns1__runCodeResponse(struct soap *soap, std::string& return_) { _ns1__runCodeResponse *_p = soap_instantiate__ns1__runCodeResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__runCodeResponse::return_ = return_; return _p; }

inline _ns1__runCodeResponse * soap_new_set__ns1__runCodeResponse(struct soap *soap, std::string& return_) { _ns1__runCodeResponse *_p = soap_instantiate__ns1__runCodeResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__runCodeResponse::return_ = return_; return _p; }

inline void soap_delete__ns1__runCodeResponse(struct soap *soap, _ns1__runCodeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__runCodeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__runCode
#define SOAP_TYPE__ns1__runCode (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__runCode(struct soap*, const char*, int, const _ns1__runCode *, const char*);
SOAP_FMAC3 _ns1__runCode * SOAP_FMAC4 soap_in__ns1__runCode(struct soap*, const char*, _ns1__runCode *, const char*);

#ifndef soap_write__ns1__runCode
#define soap_write__ns1__runCode(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:runCode", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__runCode * SOAP_FMAC4 soap_get__ns1__runCode(struct soap*, _ns1__runCode *, const char*, const char*);

#ifndef soap_read__ns1__runCode
#define soap_read__ns1__runCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__runCode(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__runCode * SOAP_FMAC2 soap_instantiate__ns1__runCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__runCode * soap_new__ns1__runCode(struct soap *soap, int n = -1) { return soap_instantiate__ns1__runCode(soap, n, NULL, NULL, NULL); }

inline _ns1__runCode * soap_new_req__ns1__runCode(struct soap *soap, std::string& Source) { _ns1__runCode *_p = soap_instantiate__ns1__runCode(soap, -1, NULL, NULL, NULL); _p->_ns1__runCode::Source = Source; return _p; }

inline _ns1__runCode * soap_new_set__ns1__runCode(struct soap *soap, std::string& Source) { _ns1__runCode *_p = soap_instantiate__ns1__runCode(soap, -1, NULL, NULL, NULL); _p->_ns1__runCode::Source = Source; return _p; }

inline void soap_delete__ns1__runCode(struct soap *soap, _ns1__runCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__runCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getNameResponse
#define SOAP_TYPE__ns1__getNameResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getNameResponse(struct soap*, const char*, int, const _ns1__getNameResponse *, const char*);
SOAP_FMAC3 _ns1__getNameResponse * SOAP_FMAC4 soap_in__ns1__getNameResponse(struct soap*, const char*, _ns1__getNameResponse *, const char*);

#ifndef soap_write__ns1__getNameResponse
#define soap_write__ns1__getNameResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getNameResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__getNameResponse * SOAP_FMAC4 soap_get__ns1__getNameResponse(struct soap*, _ns1__getNameResponse *, const char*, const char*);

#ifndef soap_read__ns1__getNameResponse
#define soap_read__ns1__getNameResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getNameResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__getNameResponse * SOAP_FMAC2 soap_instantiate__ns1__getNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getNameResponse * soap_new__ns1__getNameResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getNameResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__getNameResponse * soap_new_req__ns1__getNameResponse(struct soap *soap, std::string& return_) { _ns1__getNameResponse *_p = soap_instantiate__ns1__getNameResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__getNameResponse::return_ = return_; return _p; }

inline _ns1__getNameResponse * soap_new_set__ns1__getNameResponse(struct soap *soap, std::string& return_) { _ns1__getNameResponse *_p = soap_instantiate__ns1__getNameResponse(soap, -1, NULL, NULL, NULL); _p->_ns1__getNameResponse::return_ = return_; return _p; }

inline void soap_delete__ns1__getNameResponse(struct soap *soap, _ns1__getNameResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getNameResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getName
#define SOAP_TYPE__ns1__getName (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getName(struct soap*, const char*, int, const _ns1__getName *, const char*);
SOAP_FMAC3 _ns1__getName * SOAP_FMAC4 soap_in__ns1__getName(struct soap*, const char*, _ns1__getName *, const char*);

#ifndef soap_write__ns1__getName
#define soap_write__ns1__getName(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getName", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__getName * SOAP_FMAC4 soap_get__ns1__getName(struct soap*, _ns1__getName *, const char*, const char*);

#ifndef soap_read__ns1__getName
#define soap_read__ns1__getName(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 _ns1__getName * SOAP_FMAC2 soap_instantiate__ns1__getName(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getName * soap_new__ns1__getName(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getName(soap, n, NULL, NULL, NULL); }

inline _ns1__getName * soap_new_req__ns1__getName(struct soap *soap, std::string& Code) { _ns1__getName *_p = soap_instantiate__ns1__getName(soap, -1, NULL, NULL, NULL); _p->_ns1__getName::Code = Code; return _p; }

inline _ns1__getName * soap_new_set__ns1__getName(struct soap *soap, std::string& Code) { _ns1__getName *_p = soap_instantiate__ns1__getName(soap, -1, NULL, NULL, NULL); _p->_ns1__getName::Code = Code; return _p; }

inline void soap_delete__ns1__getName(struct soap *soap, _ns1__getName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); _p->SOAP_ENV__Text = SOAP_ENV__Text; return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); _p->__type = __type; _p->fault = fault; return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); _p->__any = __any; _p->__type = __type; _p->fault = fault; return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__Stop_
#define SOAP_TYPE___ns1__Stop_ (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Stop_(struct soap*, struct __ns1__Stop_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Stop_(struct soap*, const struct __ns1__Stop_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Stop_(struct soap*, const char*, int, const struct __ns1__Stop_ *, const char*);
SOAP_FMAC3 struct __ns1__Stop_ * SOAP_FMAC4 soap_in___ns1__Stop_(struct soap*, const char*, struct __ns1__Stop_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Stop_(struct soap*, const struct __ns1__Stop_ *, const char*, const char*);

#ifndef soap_write___ns1__Stop_
#define soap_write___ns1__Stop_(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__Stop_(soap, data, "-ns1:Stop", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__Stop_ * SOAP_FMAC4 soap_get___ns1__Stop_(struct soap*, struct __ns1__Stop_ *, const char*, const char*);

#ifndef soap_read___ns1__Stop_
#define soap_read___ns1__Stop_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Stop_(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__Stop_ * SOAP_FMAC2 soap_instantiate___ns1__Stop_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Stop_ * soap_new___ns1__Stop_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Stop_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Stop_ * soap_new_req___ns1__Stop_(struct soap *soap) { struct __ns1__Stop_ *_p = soap_instantiate___ns1__Stop_(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__Stop_ * soap_new_set___ns1__Stop_(struct soap *soap, _ns1__Stop *ns1__Stop) { struct __ns1__Stop_ *_p = soap_instantiate___ns1__Stop_(soap, -1, NULL, NULL, NULL); _p->ns1__Stop = ns1__Stop; return _p; }

inline void soap_delete___ns1__Stop_(struct soap *soap, struct __ns1__Stop_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Stop_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Status_
#define SOAP_TYPE___ns1__Status_ (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Status_(struct soap*, struct __ns1__Status_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Status_(struct soap*, const struct __ns1__Status_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Status_(struct soap*, const char*, int, const struct __ns1__Status_ *, const char*);
SOAP_FMAC3 struct __ns1__Status_ * SOAP_FMAC4 soap_in___ns1__Status_(struct soap*, const char*, struct __ns1__Status_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Status_(struct soap*, const struct __ns1__Status_ *, const char*, const char*);

#ifndef soap_write___ns1__Status_
#define soap_write___ns1__Status_(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__Status_(soap, data, "-ns1:Status", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__Status_ * SOAP_FMAC4 soap_get___ns1__Status_(struct soap*, struct __ns1__Status_ *, const char*, const char*);

#ifndef soap_read___ns1__Status_
#define soap_read___ns1__Status_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Status_(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__Status_ * SOAP_FMAC2 soap_instantiate___ns1__Status_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Status_ * soap_new___ns1__Status_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Status_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Status_ * soap_new_req___ns1__Status_(struct soap *soap) { struct __ns1__Status_ *_p = soap_instantiate___ns1__Status_(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__Status_ * soap_new_set___ns1__Status_(struct soap *soap, _ns1__Status *ns1__Status) { struct __ns1__Status_ *_p = soap_instantiate___ns1__Status_(soap, -1, NULL, NULL, NULL); _p->ns1__Status = ns1__Status; return _p; }

inline void soap_delete___ns1__Status_(struct soap *soap, struct __ns1__Status_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Status_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Start_
#define SOAP_TYPE___ns1__Start_ (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Start_(struct soap*, struct __ns1__Start_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Start_(struct soap*, const struct __ns1__Start_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Start_(struct soap*, const char*, int, const struct __ns1__Start_ *, const char*);
SOAP_FMAC3 struct __ns1__Start_ * SOAP_FMAC4 soap_in___ns1__Start_(struct soap*, const char*, struct __ns1__Start_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Start_(struct soap*, const struct __ns1__Start_ *, const char*, const char*);

#ifndef soap_write___ns1__Start_
#define soap_write___ns1__Start_(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__Start_(soap, data, "-ns1:Start", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__Start_ * SOAP_FMAC4 soap_get___ns1__Start_(struct soap*, struct __ns1__Start_ *, const char*, const char*);

#ifndef soap_read___ns1__Start_
#define soap_read___ns1__Start_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Start_(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__Start_ * SOAP_FMAC2 soap_instantiate___ns1__Start_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Start_ * soap_new___ns1__Start_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Start_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Start_ * soap_new_req___ns1__Start_(struct soap *soap) { struct __ns1__Start_ *_p = soap_instantiate___ns1__Start_(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__Start_ * soap_new_set___ns1__Start_(struct soap *soap, _ns1__Start *ns1__Start) { struct __ns1__Start_ *_p = soap_instantiate___ns1__Start_(soap, -1, NULL, NULL, NULL); _p->ns1__Start = ns1__Start; return _p; }

inline void soap_delete___ns1__Start_(struct soap *soap, struct __ns1__Start_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Start_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__runCode_
#define SOAP_TYPE___ns1__runCode_ (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runCode_(struct soap*, struct __ns1__runCode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runCode_(struct soap*, const struct __ns1__runCode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runCode_(struct soap*, const char*, int, const struct __ns1__runCode_ *, const char*);
SOAP_FMAC3 struct __ns1__runCode_ * SOAP_FMAC4 soap_in___ns1__runCode_(struct soap*, const char*, struct __ns1__runCode_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runCode_(struct soap*, const struct __ns1__runCode_ *, const char*, const char*);

#ifndef soap_write___ns1__runCode_
#define soap_write___ns1__runCode_(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__runCode_(soap, data, "-ns1:runCode", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__runCode_ * SOAP_FMAC4 soap_get___ns1__runCode_(struct soap*, struct __ns1__runCode_ *, const char*, const char*);

#ifndef soap_read___ns1__runCode_
#define soap_read___ns1__runCode_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__runCode_(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__runCode_ * SOAP_FMAC2 soap_instantiate___ns1__runCode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__runCode_ * soap_new___ns1__runCode_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__runCode_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__runCode_ * soap_new_req___ns1__runCode_(struct soap *soap) { struct __ns1__runCode_ *_p = soap_instantiate___ns1__runCode_(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__runCode_ * soap_new_set___ns1__runCode_(struct soap *soap, _ns1__runCode *ns1__runCode) { struct __ns1__runCode_ *_p = soap_instantiate___ns1__runCode_(soap, -1, NULL, NULL, NULL); _p->ns1__runCode = ns1__runCode; return _p; }

inline void soap_delete___ns1__runCode_(struct soap *soap, struct __ns1__runCode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__runCode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getName_
#define SOAP_TYPE___ns1__getName_ (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getName_(struct soap*, struct __ns1__getName_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getName_(struct soap*, const struct __ns1__getName_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getName_(struct soap*, const char*, int, const struct __ns1__getName_ *, const char*);
SOAP_FMAC3 struct __ns1__getName_ * SOAP_FMAC4 soap_in___ns1__getName_(struct soap*, const char*, struct __ns1__getName_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getName_(struct soap*, const struct __ns1__getName_ *, const char*, const char*);

#ifndef soap_write___ns1__getName_
#define soap_write___ns1__getName_(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__getName_(soap, data, "-ns1:getName", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__getName_ * SOAP_FMAC4 soap_get___ns1__getName_(struct soap*, struct __ns1__getName_ *, const char*, const char*);

#ifndef soap_read___ns1__getName_
#define soap_read___ns1__getName_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getName_(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__getName_ * SOAP_FMAC2 soap_instantiate___ns1__getName_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getName_ * soap_new___ns1__getName_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getName_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getName_ * soap_new_req___ns1__getName_(struct soap *soap) { struct __ns1__getName_ *_p = soap_instantiate___ns1__getName_(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__getName_ * soap_new_set___ns1__getName_(struct soap *soap, _ns1__getName *ns1__getName) { struct __ns1__getName_ *_p = soap_instantiate___ns1__getName_(soap, -1, NULL, NULL, NULL); _p->ns1__getName = ns1__getName; return _p; }

inline void soap_delete___ns1__getName_(struct soap *soap, struct __ns1__getName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Stop
#define SOAP_TYPE___ns1__Stop (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Stop(struct soap*, struct __ns1__Stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Stop(struct soap*, const struct __ns1__Stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Stop(struct soap*, const char*, int, const struct __ns1__Stop *, const char*);
SOAP_FMAC3 struct __ns1__Stop * SOAP_FMAC4 soap_in___ns1__Stop(struct soap*, const char*, struct __ns1__Stop *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Stop(struct soap*, const struct __ns1__Stop *, const char*, const char*);

#ifndef soap_write___ns1__Stop
#define soap_write___ns1__Stop(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__Stop(soap, data, "-ns1:Stop", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__Stop * SOAP_FMAC4 soap_get___ns1__Stop(struct soap*, struct __ns1__Stop *, const char*, const char*);

#ifndef soap_read___ns1__Stop
#define soap_read___ns1__Stop(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Stop(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__Stop * SOAP_FMAC2 soap_instantiate___ns1__Stop(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Stop * soap_new___ns1__Stop(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Stop(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Stop * soap_new_req___ns1__Stop(struct soap *soap) { struct __ns1__Stop *_p = soap_instantiate___ns1__Stop(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__Stop * soap_new_set___ns1__Stop(struct soap *soap, _ns1__Stop *ns1__Stop) { struct __ns1__Stop *_p = soap_instantiate___ns1__Stop(soap, -1, NULL, NULL, NULL); _p->ns1__Stop = ns1__Stop; return _p; }

inline void soap_delete___ns1__Stop(struct soap *soap, struct __ns1__Stop *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Stop(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Status
#define SOAP_TYPE___ns1__Status (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Status(struct soap*, struct __ns1__Status *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Status(struct soap*, const struct __ns1__Status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Status(struct soap*, const char*, int, const struct __ns1__Status *, const char*);
SOAP_FMAC3 struct __ns1__Status * SOAP_FMAC4 soap_in___ns1__Status(struct soap*, const char*, struct __ns1__Status *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Status(struct soap*, const struct __ns1__Status *, const char*, const char*);

#ifndef soap_write___ns1__Status
#define soap_write___ns1__Status(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__Status(soap, data, "-ns1:Status", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__Status * SOAP_FMAC4 soap_get___ns1__Status(struct soap*, struct __ns1__Status *, const char*, const char*);

#ifndef soap_read___ns1__Status
#define soap_read___ns1__Status(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Status(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__Status * SOAP_FMAC2 soap_instantiate___ns1__Status(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Status * soap_new___ns1__Status(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Status(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Status * soap_new_req___ns1__Status(struct soap *soap) { struct __ns1__Status *_p = soap_instantiate___ns1__Status(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__Status * soap_new_set___ns1__Status(struct soap *soap, _ns1__Status *ns1__Status) { struct __ns1__Status *_p = soap_instantiate___ns1__Status(soap, -1, NULL, NULL, NULL); _p->ns1__Status = ns1__Status; return _p; }

inline void soap_delete___ns1__Status(struct soap *soap, struct __ns1__Status *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Status(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Start
#define SOAP_TYPE___ns1__Start (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Start(struct soap*, struct __ns1__Start *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Start(struct soap*, const struct __ns1__Start *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Start(struct soap*, const char*, int, const struct __ns1__Start *, const char*);
SOAP_FMAC3 struct __ns1__Start * SOAP_FMAC4 soap_in___ns1__Start(struct soap*, const char*, struct __ns1__Start *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Start(struct soap*, const struct __ns1__Start *, const char*, const char*);

#ifndef soap_write___ns1__Start
#define soap_write___ns1__Start(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__Start(soap, data, "-ns1:Start", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__Start * SOAP_FMAC4 soap_get___ns1__Start(struct soap*, struct __ns1__Start *, const char*, const char*);

#ifndef soap_read___ns1__Start
#define soap_read___ns1__Start(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Start(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__Start * SOAP_FMAC2 soap_instantiate___ns1__Start(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Start * soap_new___ns1__Start(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Start(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Start * soap_new_req___ns1__Start(struct soap *soap) { struct __ns1__Start *_p = soap_instantiate___ns1__Start(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__Start * soap_new_set___ns1__Start(struct soap *soap, _ns1__Start *ns1__Start) { struct __ns1__Start *_p = soap_instantiate___ns1__Start(soap, -1, NULL, NULL, NULL); _p->ns1__Start = ns1__Start; return _p; }

inline void soap_delete___ns1__Start(struct soap *soap, struct __ns1__Start *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Start(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__runCode
#define SOAP_TYPE___ns1__runCode (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__runCode(struct soap*, struct __ns1__runCode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__runCode(struct soap*, const struct __ns1__runCode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__runCode(struct soap*, const char*, int, const struct __ns1__runCode *, const char*);
SOAP_FMAC3 struct __ns1__runCode * SOAP_FMAC4 soap_in___ns1__runCode(struct soap*, const char*, struct __ns1__runCode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__runCode(struct soap*, const struct __ns1__runCode *, const char*, const char*);

#ifndef soap_write___ns1__runCode
#define soap_write___ns1__runCode(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__runCode(soap, data, "-ns1:runCode", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__runCode * SOAP_FMAC4 soap_get___ns1__runCode(struct soap*, struct __ns1__runCode *, const char*, const char*);

#ifndef soap_read___ns1__runCode
#define soap_read___ns1__runCode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__runCode(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__runCode * SOAP_FMAC2 soap_instantiate___ns1__runCode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__runCode * soap_new___ns1__runCode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__runCode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__runCode * soap_new_req___ns1__runCode(struct soap *soap) { struct __ns1__runCode *_p = soap_instantiate___ns1__runCode(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__runCode * soap_new_set___ns1__runCode(struct soap *soap, _ns1__runCode *ns1__runCode) { struct __ns1__runCode *_p = soap_instantiate___ns1__runCode(soap, -1, NULL, NULL, NULL); _p->ns1__runCode = ns1__runCode; return _p; }

inline void soap_delete___ns1__runCode(struct soap *soap, struct __ns1__runCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__runCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getName
#define SOAP_TYPE___ns1__getName (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getName(struct soap*, struct __ns1__getName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getName(struct soap*, const struct __ns1__getName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getName(struct soap*, const char*, int, const struct __ns1__getName *, const char*);
SOAP_FMAC3 struct __ns1__getName * SOAP_FMAC4 soap_in___ns1__getName(struct soap*, const char*, struct __ns1__getName *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getName(struct soap*, const struct __ns1__getName *, const char*, const char*);

#ifndef soap_write___ns1__getName
#define soap_write___ns1__getName(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put___ns1__getName(soap, data, "-ns1:getName", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct __ns1__getName * SOAP_FMAC4 soap_get___ns1__getName(struct soap*, struct __ns1__getName *, const char*, const char*);

#ifndef soap_read___ns1__getName
#define soap_read___ns1__getName(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct __ns1__getName * SOAP_FMAC2 soap_instantiate___ns1__getName(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getName * soap_new___ns1__getName(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getName(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getName * soap_new_req___ns1__getName(struct soap *soap) { struct __ns1__getName *_p = soap_instantiate___ns1__getName(soap, -1, NULL, NULL, NULL); return _p; }

inline struct __ns1__getName * soap_new_set___ns1__getName(struct soap *soap, _ns1__getName *ns1__getName) { struct __ns1__getName *_p = soap_instantiate___ns1__getName(soap, -1, NULL, NULL, NULL); _p->ns1__getName = ns1__getName; return _p; }

inline void soap_delete___ns1__getName(struct soap *soap, struct __ns1__getName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__StopResponse
#define SOAP_TYPE_PointerTo_ns1__StopResponse (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopResponse(struct soap*, _ns1__StopResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopResponse(struct soap*, const char *, int, _ns1__StopResponse *const*, const char *);
SOAP_FMAC3 _ns1__StopResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopResponse(struct soap*, const char*, _ns1__StopResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopResponse(struct soap*, _ns1__StopResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__StopResponse
#define soap_write_PointerTo_ns1__StopResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__StopResponse(soap, data, "ns1:StopResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__StopResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopResponse(struct soap*, _ns1__StopResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__StopResponse
#define soap_read_PointerTo_ns1__StopResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__StopResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Stop
#define SOAP_TYPE_PointerTo_ns1__Stop (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Stop(struct soap*, _ns1__Stop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Stop(struct soap*, const char *, int, _ns1__Stop *const*, const char *);
SOAP_FMAC3 _ns1__Stop ** SOAP_FMAC4 soap_in_PointerTo_ns1__Stop(struct soap*, const char*, _ns1__Stop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Stop(struct soap*, _ns1__Stop *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Stop
#define soap_write_PointerTo_ns1__Stop(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__Stop(soap, data, "ns1:Stop", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__Stop ** SOAP_FMAC4 soap_get_PointerTo_ns1__Stop(struct soap*, _ns1__Stop **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Stop
#define soap_read_PointerTo_ns1__Stop(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Stop(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__StatusResponse
#define SOAP_TYPE_PointerTo_ns1__StatusResponse (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StatusResponse(struct soap*, _ns1__StatusResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StatusResponse(struct soap*, const char *, int, _ns1__StatusResponse *const*, const char *);
SOAP_FMAC3 _ns1__StatusResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__StatusResponse(struct soap*, const char*, _ns1__StatusResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StatusResponse(struct soap*, _ns1__StatusResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__StatusResponse
#define soap_write_PointerTo_ns1__StatusResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__StatusResponse(soap, data, "ns1:StatusResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__StatusResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__StatusResponse(struct soap*, _ns1__StatusResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__StatusResponse
#define soap_read_PointerTo_ns1__StatusResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__StatusResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Status
#define SOAP_TYPE_PointerTo_ns1__Status (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Status(struct soap*, _ns1__Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Status(struct soap*, const char *, int, _ns1__Status *const*, const char *);
SOAP_FMAC3 _ns1__Status ** SOAP_FMAC4 soap_in_PointerTo_ns1__Status(struct soap*, const char*, _ns1__Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Status(struct soap*, _ns1__Status *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Status
#define soap_write_PointerTo_ns1__Status(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__Status(soap, data, "ns1:Status", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__Status ** SOAP_FMAC4 soap_get_PointerTo_ns1__Status(struct soap*, _ns1__Status **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Status
#define soap_read_PointerTo_ns1__Status(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Status(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__StartResponse
#define SOAP_TYPE_PointerTo_ns1__StartResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StartResponse(struct soap*, _ns1__StartResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StartResponse(struct soap*, const char *, int, _ns1__StartResponse *const*, const char *);
SOAP_FMAC3 _ns1__StartResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__StartResponse(struct soap*, const char*, _ns1__StartResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StartResponse(struct soap*, _ns1__StartResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__StartResponse
#define soap_write_PointerTo_ns1__StartResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__StartResponse(soap, data, "ns1:StartResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__StartResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__StartResponse(struct soap*, _ns1__StartResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__StartResponse
#define soap_read_PointerTo_ns1__StartResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__StartResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Start
#define SOAP_TYPE_PointerTo_ns1__Start (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Start(struct soap*, _ns1__Start *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Start(struct soap*, const char *, int, _ns1__Start *const*, const char *);
SOAP_FMAC3 _ns1__Start ** SOAP_FMAC4 soap_in_PointerTo_ns1__Start(struct soap*, const char*, _ns1__Start **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Start(struct soap*, _ns1__Start *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Start
#define soap_write_PointerTo_ns1__Start(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__Start(soap, data, "ns1:Start", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__Start ** SOAP_FMAC4 soap_get_PointerTo_ns1__Start(struct soap*, _ns1__Start **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Start
#define soap_read_PointerTo_ns1__Start(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Start(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__runCodeResponse
#define SOAP_TYPE_PointerTo_ns1__runCodeResponse (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__runCodeResponse(struct soap*, _ns1__runCodeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__runCodeResponse(struct soap*, const char *, int, _ns1__runCodeResponse *const*, const char *);
SOAP_FMAC3 _ns1__runCodeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__runCodeResponse(struct soap*, const char*, _ns1__runCodeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__runCodeResponse(struct soap*, _ns1__runCodeResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__runCodeResponse
#define soap_write_PointerTo_ns1__runCodeResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__runCodeResponse(soap, data, "ns1:runCodeResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__runCodeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__runCodeResponse(struct soap*, _ns1__runCodeResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__runCodeResponse
#define soap_read_PointerTo_ns1__runCodeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__runCodeResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__runCode
#define SOAP_TYPE_PointerTo_ns1__runCode (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__runCode(struct soap*, _ns1__runCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__runCode(struct soap*, const char *, int, _ns1__runCode *const*, const char *);
SOAP_FMAC3 _ns1__runCode ** SOAP_FMAC4 soap_in_PointerTo_ns1__runCode(struct soap*, const char*, _ns1__runCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__runCode(struct soap*, _ns1__runCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__runCode
#define soap_write_PointerTo_ns1__runCode(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__runCode(soap, data, "ns1:runCode", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__runCode ** SOAP_FMAC4 soap_get_PointerTo_ns1__runCode(struct soap*, _ns1__runCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__runCode
#define soap_read_PointerTo_ns1__runCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__runCode(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getNameResponse
#define SOAP_TYPE_PointerTo_ns1__getNameResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getNameResponse(struct soap*, _ns1__getNameResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getNameResponse(struct soap*, const char *, int, _ns1__getNameResponse *const*, const char *);
SOAP_FMAC3 _ns1__getNameResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getNameResponse(struct soap*, const char*, _ns1__getNameResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getNameResponse(struct soap*, _ns1__getNameResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getNameResponse
#define soap_write_PointerTo_ns1__getNameResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__getNameResponse(soap, data, "ns1:getNameResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__getNameResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getNameResponse(struct soap*, _ns1__getNameResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getNameResponse
#define soap_read_PointerTo_ns1__getNameResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getNameResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getName
#define SOAP_TYPE_PointerTo_ns1__getName (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getName(struct soap*, _ns1__getName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getName(struct soap*, const char *, int, _ns1__getName *const*, const char *);
SOAP_FMAC3 _ns1__getName ** SOAP_FMAC4 soap_in_PointerTo_ns1__getName(struct soap*, const char*, _ns1__getName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getName(struct soap*, _ns1__getName *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getName
#define soap_write_PointerTo_ns1__getName(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerTo_ns1__getName(soap, data, "ns1:getName", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 _ns1__getName ** SOAP_FMAC4 soap_get_PointerTo_ns1__getName(struct soap*, _ns1__getName **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getName
#define soap_read_PointerTo_ns1__getName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)


#define soap_serialize__QName(soap, a) soap_serialize_string(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

/* End of soapH.h */
